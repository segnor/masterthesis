<?xml version='1.0' encoding='utf-8' ?>

<workbook version='8.2' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8100.13.1231.1350                -->
  <preferences>
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.2'>
      <aliases enabled='yes' />
      <column caption='IP Address ' datatype='string' name='[Parameter 10]' param-domain-type='any' role='measure' type='nominal' value='&quot;localhost&quot;'>
        <calculation class='tableau' formula='&quot;localhost&quot;' />
        <desc>
          <formatted-text>
            <run>Input IP Address of server H2O is launched on</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Port' datatype='integer' name='[Parameter 11]' param-domain-type='any' role='measure' type='quantitative' value='54321'>
        <calculation class='tableau' formula='54321' />
      </column>
      <column caption='Path To Data' datatype='string' name='[Parameter 12]' param-domain-type='any' role='measure' type='nominal' value='&quot;https://github.com/0xdata/h2o/blob/master/smalldata/airlines/allyears2k_headers.zip?raw=true&quot;'>
        <calculation class='tableau' formula='&quot;https://github.com/0xdata/h2o/blob/master/smalldata/airlines/allyears2k_headers.zip?raw=true&quot;' />
      </column>
      <column caption='Beta' datatype='boolean' name='[Parameter 13]' param-domain-type='list' role='measure' type='nominal' value='true'>
        <calculation class='tableau' formula='true' />
        <members>
          <member value='true' />
          <member value='false' />
        </members>
      </column>
      <column caption='Local H2O Heap Size' datatype='string' name='[Parameter 14]' param-domain-type='any' role='measure' type='nominal' value='&quot;1g&quot;'>
        <calculation class='tableau' formula='&quot;1g&quot;' />
      </column>
      <column caption='(GLM) Lambda' datatype='string' name='[Parameter 15]' param-domain-type='any' role='measure' type='nominal' value='&quot;1.0E-5&quot;'>
        <calculation class='tableau' formula='&quot;1.0E-5&quot;' />
      </column>
      <column caption='(GLM) Response Variable' datatype='string' name='[Parameter 1]' param-domain-type='any' role='measure' type='nominal' value='&quot;Cancelled&quot;'>
        <calculation class='tableau' formula='&quot;Cancelled&quot;' />
      </column>
      <column caption='(GLM) Predictor Variables' datatype='string' name='[Parameter 2]' param-domain-type='any' role='measure' type='nominal' value='&quot;Origin,Dest,UniqueCarrier&quot;'>
        <calculation class='tableau' formula='&quot;Origin,Dest,UniqueCarrier&quot;' />
      </column>
      <column caption='(GLM) Alpha' datatype='real' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='1.0'>
        <calculation class='tableau' formula='1.0' />
        <range granularity='0.25' max='1.0' min='0.0' />
      </column>
      <column caption='(GLM) Cross Validation N-Folds' datatype='integer' name='[Parameter 4]' param-domain-type='range' role='measure' type='quantitative' value='0'>
        <calculation class='tableau' formula='0' />
        <range granularity='1' min='0' />
      </column>
      <column caption='(GLM) Family' datatype='string' name='[Parameter 5]' param-domain-type='list' role='measure' type='nominal' value='&quot;binomial&quot;'>
        <calculation class='tableau' formula='&quot;binomial&quot;' />
        <members>
          <member value='&quot;gaussian&quot;' />
          <member value='&quot;binomial&quot;' />
          <member value='&quot;poisson&quot;' />
          <member value='&quot;gamma&quot;' />
          <member value='&quot;tweedie&quot;' />
        </members>
      </column>
      <column caption='(GLM) Model Name' datatype='string' name='[Parameter 6]' param-domain-type='any' role='measure' type='nominal' value='&quot;data.glm&quot;'>
        <calculation class='tableau' formula='&quot;data.glm&quot;' />
      </column>
      <column caption='(K-Means) # of Centers' datatype='integer' name='[Parameter 7]' param-domain-type='range' role='measure' type='quantitative' value='2'>
        <calculation class='tableau' formula='2' />
        <range granularity='1' min='1' />
      </column>
      <column caption='(K-Means) Model Name' datatype='string' name='[Parameter 8]' param-domain-type='any' role='measure' type='nominal' value='&quot;data.km&quot;'>
        <calculation class='tableau' formula='&quot;data.km&quot;' />
      </column>
      <column caption='(K-means) Eval Cols' datatype='string' name='[Parameter 9]' param-domain-type='list' role='measure' type='nominal' value='&quot;AllAvailableColumns&quot;'>
        <calculation class='tableau' formula='&quot;AllAvailableColumns&quot;' />
        <members>
          <member value='&quot;AllAvailableColumns&quot;' />
          <member value='&quot;Year&quot;' />
          <member value='&quot;Month&quot;' />
          <member value='&quot;DayofMonth&quot;' />
          <member value='&quot;DayOfWeek&quot;' />
          <member value='&quot;DepTime&quot;' />
          <member value='&quot;CRSDepTime&quot;' />
          <member value='&quot;ArrTime&quot;' />
          <member value='&quot;CRSArrTime&quot;' />
          <member value='&quot;UniqueCarrier&quot;' />
          <member value='&quot;FlightNum&quot;' />
          <member value='&quot;TailNum&quot;' />
          <member value='&quot;ActualElapsedTime&quot;' />
          <member value='&quot;CRSElapsedTime&quot;' />
          <member value='&quot;AirTime&quot;' />
          <member value='&quot;ArrDelay&quot;' />
          <member value='&quot;DepDelay&quot;' />
          <member value='&quot;Origin&quot;' />
          <member value='&quot;Dest&quot;' />
          <member value='&quot;Distance&quot;' />
          <member value='&quot;TaxiIn&quot;' />
          <member value='&quot;TaxiOut&quot;' />
          <member value='&quot;Cancelled&quot;' />
          <member value='&quot;CancellationCode&quot;' />
          <member value='&quot;Diverted&quot;' />
          <member value='&quot;CarrierDelay&quot;' />
          <member value='&quot;WeatherDelay&quot;' />
          <member value='&quot;NASDelay&quot;' />
          <member value='&quot;SecurityDelay&quot;' />
          <member value='&quot;LateAircraftDelay&quot;' />
          <member value='&quot;IsArrDelayed&quot;' />
          <member value='&quot;IsDepDelayed&quot;' />
          <member value='&quot;City&quot;' />
        </members>
      </column>
      <folder name='GLM Parameters' role='parameters'>
        <folder-item name='[Parameter 15]' type='field' />
        <folder-item name='[Parameter 1]' type='field' />
        <folder-item name='[Parameter 2]' type='field' />
        <folder-item name='[Parameter 3]' type='field' />
        <folder-item name='[Parameter 4]' type='field' />
        <folder-item name='[Parameter 5]' type='field' />
        <folder-item name='[Parameter 6]' type='field' />
      </folder>
      <folder name='H2O Initialization' role='parameters'>
        <folder-item name='[Parameter 10]' type='field' />
        <folder-item name='[Parameter 11]' type='field' />
        <folder-item name='[Parameter 12]' type='field' />
        <folder-item name='[Parameter 13]' type='field' />
        <folder-item name='[Parameter 14]' type='field' />
      </folder>
      <folder name='K-Means Parameters' role='parameters'>
        <folder-item name='[Parameter 7]' type='field' />
        <folder-item name='[Parameter 8]' type='field' />
        <folder-item name='[Parameter 9]' type='field' />
      </folder>
    </datasource>
    <datasource caption='airlines_meta' inline='true' name='csv.41677.501581817130' version='8.2'>
      <connection auto-extract='yes' character-set='65001' class='csv' directory='C:\Users\Amy\Documents\h2o\Tableau\meta_data' driver='' filename='airlines_meta.csv' force-character-set='no' force-header='no' force-separator='no' header='yes' separator=','>
        <relation name='airlines_meta#csv' table='[airlines_meta#csv]' type='table' />
      </connection>
      <aliases enabled='yes' />
      <column caption='Cancellation Count By Airport' datatype='integer' name='[02 Flight Count By Airport (copy)]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx4 = match( .arg1 , origin_canFlights.R$Origin ) &#13;&#10;print(origin_canFlights.R[idx4,]$C1)&#13;&#10;origin_canFlights.R[idx4,]$C1&#13;&#10;&quot;,&#13;&#10;ATTR([Origin])&#13;&#10;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Flight Count By Airport' datatype='integer' name='[02 Flight Count By Months (copy 2)]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx3 = match( .arg1 , originFlights.R$Origin ) &#13;&#10;print(originFlights.R[idx3,]$C1)&#13;&#10;originFlights.R[idx3,]$C1&#13;&#10;&quot;,&#13;&#10;ATTR([Origin])&#13;&#10;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Cancellation Count By Months' datatype='integer' name='[02 Flight Count By Months (copy)]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx2 = match( .arg1 , canFlights.R$Month ) &#13;&#10;print(canFlights.R[idx2,]$C1)&#13;&#10;if ( !is.na( .arg1 ) ) { canFlights.R[idx2,]$C1&#13;&#10;} else {&apos;Filter out Null values&apos;}&#13;&#10;&quot;,&#13;&#10;ATTR([Month])&#13;&#10;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='(GLM) Variable Coefficient Signage' datatype='integer' name='[03 Grab Coefficient Variables (copy)]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='SIGN([Calculation_7320206215923342])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Index' datatype='integer' name='[Calculation_0230903195627598]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='Index()' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='00 Load H2O and Tableau functions' datatype='string' name='[Calculation_0500424135127287]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot;&#13;&#10;## Load H2O&apos;s client R package&#13;&#10;library(h2o)&#13;&#10;&#13;&#10;## Tableau High NA Count&#13;&#10;tableau.ignoreColumns &lt;- function (ignore_col , predictorVariable ) {&#13;&#10;if( predictorVariable %in% ignore_col ) { print( &apos;High NA Count&apos; )&#13;&#10;} else {print( &apos;Normal&apos; )}&#13;&#10;}&#13;&#10;&#13;&#10;## Tableau grab coefficients corresponding to predictor variable&#13;&#10;tableau_catFormat &lt;- function( modelKey , variableStr, predictorVariable) {&#13;&#10;if( typeof(modelKey) != &apos;S4&apos;) print(&apos;Model Key is not in expected format of S4&apos;)&#13;&#10;if( is.character(variableStr) != TRUE) print(&apos;Input column is not in expected format of string&apos;)&#13;&#10;if( is.character(predictorVariable) != TRUE) print(&apos;Input variables is not in expected format of string&apos;)&#13;&#10;glmModelTemp        = modelKey&#13;&#10;modelCoeff          = modelKey@model$coefficients&#13;&#10;modelCoeff          = modelKey@model$coefficients&#13;&#10;idx                 = grep( variableStr , names(modelCoeff))&#13;&#10;modelCoeff2        = modelCoeff[idx]&#13;&#10;variableNames       = unlist(strsplit(names(modelCoeff2),split=&apos;.&apos;,fixed=TRUE))&#13;&#10;variableNamesMatrix = matrix(variableNames, ncol=2, byrow=TRUE)&#13;&#10;variableList        = variableNamesMatrix[,2]&#13;&#10;names(modelCoeff2)  = variableList&#13;&#10;setDiff             = setdiff(.arg1,variableList)&#13;&#10;nullVec             = rep(0,length(setDiff))&#13;&#10;names(nullVec)      = setDiff&#13;&#10;newCoefficientList  = c(modelCoeff2, nullVec)&#13;&#10;tableau_input       = newCoefficientList[predictorVariable]&#13;&#10;tableau_input}&#13;&#10;&#13;&#10;print(&apos;Finish setting up Tableau functions&apos;)&#13;&#10;&apos;Finish setting up Tableau functions&apos;&#13;&#10;&quot;,&#13;&#10;&quot;&quot;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Option : Null' datatype='real' name='[Calculation_0840422201739178]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IIF([Calculation_7320206215923342]==0,Null,[Calculation_7320206215923342])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Flight Count By Months' datatype='integer' name='[Calculation_1340527151300682]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx = match( .arg1 , numFlights.R$Month ) &#13;&#10;print(numFlights.R[idx,]$C1)&#13;&#10;if ( !is.na( .arg1 ) ) { numFlights.R[idx,]$C1&#13;&#10;} else {&apos;Filter out Null values&apos;}&#13;&#10;&quot;,&#13;&#10;ATTR([Month])&#13;&#10;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='(GLM) AUC Value' datatype='real' name='[Calculation_2510527224812934]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='script_real(&quot;&#13;&#10;data.glm@model$auc&#13;&#10;&quot;,&#13;&#10;INDEX() &#13;&#10;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='01 Init H2O &amp; Parse Data' datatype='string' name='[Calculation_2960206151848632]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot;&#13;&#10;print(&apos;Starting H2O&apos;)&#13;&#10;h2oLocal=h2o.init( ip = .arg1, port = .arg2, max_mem_size = .arg3, beta = .arg4, nthreads = -1)&#13;&#10;print(&apos;Importing data into H2O&apos;)&#13;&#10;data.hex = h2o.importFile(h2oLocal, path = .arg5)&#13;&#10;&quot;,&#13;&#10;[Parameters].[Parameter 10],[Parameters].[Parameter 11],[Parameters].[Parameter 14],[Parameters].[Parameter 13],[Parameters].[Parameter 12])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='02 Compute Aggregation with H2O&apos;s h2o.ddply' datatype='string' name='[Calculation_6260902222221692]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='Script_STR(&quot;&#13;&#10;print(&apos;Grouping flights by months...&apos;)&#13;&#10;## h2o.ddply, find the length of each month&#13;&#10;numFlights = h2o.ddply(data.hex, &apos;Month&apos;, nrow)&#13;&#10;numFlights.R = as.data.frame(numFlights)&#13;&#10;print(numFlights.R)&#13;&#10;&#13;&#10;print(&apos;Grouping number of cancellations by months...&apos;)&#13;&#10;## h2o.ddply, find the sum of the cancellation column for each month&#13;&#10;fun2 = function(df) {sum(df$Cancelled)}&#13;&#10;h2o.addFunction(h2oLocal, fun2)&#13;&#10;canFlights = h2o.ddply(data.hex, &apos;Month&apos;, fun2)&#13;&#10;canFlights.R = as.data.frame(canFlights)&#13;&#10;print(canFlights.R)&#13;&#10;print(&apos;Finish aggregating by month&apos;)&#13;&#10;&#13;&#10;print(&apos;Grouping flights by airport...&apos;)&#13;&#10;## h2o.ddply, find the length of each airport&#13;&#10;originFlights = h2o.ddply(data.hex, &apos;Origin&apos;, nrow)&#13;&#10;originFlights.R = as.data.frame(originFlights)&#13;&#10;print(canFlights.R)&#13;&#10;&#13;&#10;print(&apos;Grouping number of cancellations by airport...&apos;)&#13;&#10;## h2o.ddply, find the sum of the cancellation column for each airport&#13;&#10;origin_canFlights = h2o.ddply(data.hex, &apos;Origin&apos;, fun2)&#13;&#10;origin_canFlights.R = as.data.frame(origin_canFlights)&#13;&#10;print(origin_canFlights.R)&#13;&#10;print(&apos;Finish aggregating by airport&apos;)&#13;&#10;&#13;&#10;&quot;,&#13;&#10;&quot;&quot;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='(GLM) Variable Coefficients' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='03 Run GLM' datatype='string' name='[Calculation_8800501133749493]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot; &#13;&#10;xvars = unlist( strsplit( .arg2, split = &apos;,&apos; , fixed = TRUE ) )&#13;&#10;print( &apos;break&apos;)&#13;&#10;print( xvars )&#13;&#10;print( .arg3 )&#13;&#10;print( data.hex )&#13;&#10;print( .arg4 )&#13;&#10;print( .arg5 )&#13;&#10;print( .arg6 )&#13;&#10;print( .arg7 )&#13;&#10;data.glm = h2o.glm(x = xvars , y = .arg3, data = data.hex, family = .arg4, nfolds = .arg5, standardize=TRUE)&#13;&#10;&#13;&#10;print(data.glm)&#13;&#10;&#13;&#10;&quot;,&#13;&#10;[Parameters].[Parameter 6],[Parameters].[Parameter 2],[Parameters].[Parameter 1], [Parameters].[Parameter 5], [Parameters].[Parameter 4],[Parameters].[Parameter 3], [Parameters].[Parameter 15])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Cancellations by Airport' datatype='string' name='[Cancellation by Month (copy)]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot;&#13;&#10;## h2o.ddply, find the length of each month&#13;&#10;originFlights = h2o.ddply(data.hex, &apos;Origin&apos;, nrow)&#13;&#10;originFlights.R = as.data.frame(originFlights)&#13;&#10;print(canFlights.R)&#13;&#10;&#13;&#10;## h2o.ddply, find the length of each month&#13;&#10;origin_canFlights = h2o.ddply(data.hex, &apos;Origin&apos;, fun2)&#13;&#10;origin_canFlights.R = as.data.frame(origin_canFlights)&#13;&#10;print(origin_canFlights.R)&#13;&#10;&#13;&#10;&#13;&#10;&quot;,&#13;&#10;&quot;&quot;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column aggregation='Sum' datatype='integer' name='[DayOfWeek]' role='dimension' type='quantitative'>
      </column>
      <column aggregation='Sum' datatype='integer' name='[DayofMonth]' role='dimension' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Month]' role='dimension' type='quantitative'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column aggregation='Avg' datatype='real' name='[OLat]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column aggregation='Avg' datatype='real' name='[OLong]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' name='[Regional Groups]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <calculation class='categorical-bin' column='[OCity]' default='&quot;Yuma&quot;'>
          <bin value='&quot;Albany&quot;'>
            <value>&quot;Albany&quot;</value>
            <value>&quot;Charlotte&quot;</value>
            <value>&quot;Greensboro&quot;</value>
            <value>&quot;Raleigh-durham&quot;</value>
            <value>&quot;Richmond&quot;</value>
            <value>&quot;Roanoke VA&quot;</value>
            <value>&quot;Washington&quot;</value>
          </bin>
          <bin value='&quot;Aspen&quot;'>
            <value>&quot;Aspen&quot;</value>
            <value>&quot;Boise&quot;</value>
            <value>&quot;Colorado Springs&quot;</value>
            <value>&quot;Denver&quot;</value>
            <value>&quot;Fresno&quot;</value>
            <value>&quot;Hailey&quot;</value>
            <value>&quot;Long Beach&quot;</value>
            <value>&quot;Los Angeles&quot;</value>
            <value>&quot;Oakland&quot;</value>
            <value>&quot;Ontario&quot;</value>
            <value>&quot;Palm Springs&quot;</value>
            <value>&quot;Reno&quot;</value>
            <value>&quot;San Diego&quot;</value>
            <value>&quot;San Francisco&quot;</value>
            <value>&quot;San Jose&quot;</value>
          </bin>
          <bin value='&quot;Austin&quot;'>
            <value>&quot;Austin&quot;</value>
            <value>&quot;Birmingham&quot;</value>
            <value>&quot;Columbus&quot;</value>
            <value>&quot;Dallas-Fort Worth&quot;</value>
            <value>&quot;Greenville&quot;</value>
            <value>&quot;Houston&quot;</value>
            <value>&quot;Little Rock&quot;</value>
            <value>&quot;Lubbock&quot;</value>
            <value>&quot;Memphis&quot;</value>
            <value>&quot;Miami&quot;</value>
            <value>&quot;Midland&quot;</value>
            <value>&quot;New Orleans&quot;</value>
            <value>&quot;Oklahoma City&quot;</value>
            <value>&quot;Sarasota&quot;</value>
            <value>&quot;Tulsa&quot;</value>
          </bin>
          <bin value='&quot;Cedar Rapids&quot;'>
            <value>&quot;Cedar Rapids&quot;</value>
            <value>&quot;Chicago&quot;</value>
            <value>&quot;Cincinnati&quot;</value>
            <value>&quot;Cleveland&quot;</value>
            <value>&quot;Detroit&quot;</value>
            <value>&quot;Indianapolis&quot;</value>
            <value>&quot;Kalamazoo&quot;</value>
            <value>&quot;Kansas City&quot;</value>
            <value>&quot;Louisville&quot;</value>
            <value>&quot;Milwaukee&quot;</value>
            <value>&quot;Minneapolis&quot;</value>
            <value>&quot;Omaha&quot;</value>
            <value>&quot;Pittsburgh&quot;</value>
            <value>&quot;Portland&quot;</value>
            <value>&quot;Rochester&quot;</value>
            <value>&quot;St. Louis&quot;</value>
          </bin>
          <bin value='&quot;Islip&quot;'>
            <value>&quot;Islip&quot;</value>
            <value>&quot;New York&quot;</value>
            <value>&quot;Newark&quot;</value>
            <value>&quot;Philadelphia&quot;</value>
            <value>&quot;Worcester&quot;</value>
          </bin>
        </calculation>
        <aliases>
          <alias key='&quot;Albany&quot;' value='Mid-Atlantic' />
          <alias key='&quot;Aspen&quot;' value='West' />
          <alias key='&quot;Austin&quot;' value='South' />
          <alias key='&quot;Cedar Rapids&quot;' value='Midwest' />
          <alias key='&quot;Islip&quot;' value='Northeast' />
          <alias key='&quot;Yuma&quot;' value='Other' />
        </aliases>
      </column>
      <column datatype='date' datatype-customized='true' name='[Year]' role='dimension' type='quantitative'>
      </column>
      <column-instance column='[Month]' derivation='None' name='[none:Month:qk]' pivot='key' type='quantitative' />
      <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
      <column-instance column='[OLat]' derivation='None' name='[none:OLat:qk]' pivot='key' type='quantitative' />
      <column-instance column='[OLong]' derivation='None' name='[none:OLong:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
      <column-instance column='[02 Flight Count By Airport (copy)]' derivation='User' name='[usr:02 Flight Count By Airport (copy):qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[csv.41677.501581817130].[none:OCity:nk]' ordering-type='Field' />
      </column-instance>
      <column-instance column='[02 Flight Count By Months (copy 2)]' derivation='User' name='[usr:02 Flight Count By Months (copy 2):qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[csv.41677.501581817130].[none:OCity:nk]' ordering-type='Field' />
      </column-instance>
      <column-instance column='[02 Flight Count By Months (copy)]' derivation='User' name='[usr:02 Flight Count By Months (copy):qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[csv.41677.501581817130].[none:Month:qk]' ordering-type='Field' />
      </column-instance>
      <column-instance column='[03 Grab Coefficient Variables (copy)]' derivation='User' name='[usr:03 Grab Coefficient Variables (copy):ok]' pivot='key' type='ordinal'>
        <table-calc ordering-type='Rows' />
        <table-calc field='[csv.41677.501581817130].[Calculation_7320206215923342]' ordering-type='Rows' />
      </column-instance>
      <column-instance column='[Calculation_1340527151300682]' derivation='User' name='[usr:Calculation_1340527151300682:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[csv.41677.501581817130].[none:Month:qk]' ordering-type='Field' />
      </column-instance>
      <group hidden='true' name='[Action (City,Origin)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[City]' />
          <groupfilter function='level-members' level='[Origin]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (Month)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Month]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (OCity)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[OCity]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (OCity,OLat,OLong,Origin)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[OCity]' />
          <groupfilter function='level-members' level='[none:OLat:qk]' />
          <groupfilter function='level-members' level='[none:OLong:qk]' />
          <groupfilter function='level-members' level='[Origin]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (OCity,Origin)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[OCity]' />
          <groupfilter function='level-members' level='[Origin]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (Origin)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Origin]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (City,Origin)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:City:nk]' />
          <groupfilter function='level-members' level='[none:Origin:nk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.459783' measure-ordering='alphabetic' measure-percentage='0.327174' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[csv.41677.501581817130].[usr:02 Flight Count By Months (copy):qk:1]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[csv.41677.501581817130]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[csv.41677.501581817130].[usr:02 Flight Count By Months (copy 2):qk:1]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[csv.41677.501581817130].[usr:02 Flight Count By Airport (copy):qk:1]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[csv.41677.501581817130].[usr:Calculation_1340527151300682:qk:1]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[usr:03 Grab Coefficient Variables (copy):ok]' type='palette'>
            <map to='#1f77b4'>
              <bucket>%null%</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>-1</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>0</bucket>
            </map>
            <map to='#d62728'>
              <bucket>1</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='IP Address ' datatype='string' name='[Parameter 10]' param-domain-type='any' role='measure' type='nominal' value='&quot;localhost&quot;'>
          <calculation class='tableau' formula='&quot;localhost&quot;' />
          <desc>
            <formatted-text>
              <run>Input IP Address of server H2O is launched on</run>
            </formatted-text>
          </desc>
        </column>
        <column caption='Port' datatype='integer' name='[Parameter 11]' param-domain-type='any' role='measure' type='quantitative' value='54321'>
          <calculation class='tableau' formula='54321' />
        </column>
        <column caption='Path To Data' datatype='string' name='[Parameter 12]' param-domain-type='any' role='measure' type='nominal' value='&quot;https://github.com/0xdata/h2o/blob/master/smalldata/airlines/allyears2k_headers.zip?raw=true&quot;'>
          <calculation class='tableau' formula='&quot;https://github.com/0xdata/h2o/blob/master/smalldata/airlines/allyears2k_headers.zip?raw=true&quot;' />
        </column>
        <column caption='Beta' datatype='boolean' name='[Parameter 13]' param-domain-type='list' role='measure' type='nominal' value='true'>
          <calculation class='tableau' formula='true' />
          <members>
            <member value='true' />
            <member value='false' />
          </members>
        </column>
        <column caption='Local H2O Heap Size' datatype='string' name='[Parameter 14]' param-domain-type='any' role='measure' type='nominal' value='&quot;1g&quot;'>
          <calculation class='tableau' formula='&quot;1g&quot;' />
        </column>
        <column caption='(GLM) Lambda' datatype='string' name='[Parameter 15]' param-domain-type='any' role='measure' type='nominal' value='&quot;1.0E-5&quot;'>
          <calculation class='tableau' formula='&quot;1.0E-5&quot;' />
        </column>
        <column caption='(GLM) Response Variable' datatype='string' name='[Parameter 1]' param-domain-type='any' role='measure' type='nominal' value='&quot;Cancelled&quot;'>
          <calculation class='tableau' formula='&quot;Cancelled&quot;' />
        </column>
        <column caption='(GLM) Predictor Variables' datatype='string' name='[Parameter 2]' param-domain-type='any' role='measure' type='nominal' value='&quot;Origin,Dest,UniqueCarrier&quot;'>
          <calculation class='tableau' formula='&quot;Origin,Dest,UniqueCarrier&quot;' />
        </column>
        <column caption='(GLM) Alpha' datatype='real' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='1.0'>
          <calculation class='tableau' formula='1.0' />
          <range granularity='0.25' max='1.0' min='0.0' />
        </column>
        <column caption='(GLM) Cross Validation N-Folds' datatype='integer' name='[Parameter 4]' param-domain-type='range' role='measure' type='quantitative' value='0'>
          <calculation class='tableau' formula='0' />
          <range granularity='1' min='0' />
        </column>
        <column caption='(GLM) Family' datatype='string' name='[Parameter 5]' param-domain-type='list' role='measure' type='nominal' value='&quot;binomial&quot;'>
          <calculation class='tableau' formula='&quot;binomial&quot;' />
          <members>
            <member value='&quot;gaussian&quot;' />
            <member value='&quot;binomial&quot;' />
            <member value='&quot;poisson&quot;' />
            <member value='&quot;gamma&quot;' />
            <member value='&quot;tweedie&quot;' />
          </members>
        </column>
        <column caption='(GLM) Model Name' datatype='string' name='[Parameter 6]' param-domain-type='any' role='measure' type='nominal' value='&quot;data.glm&quot;'>
          <calculation class='tableau' formula='&quot;data.glm&quot;' />
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Online' />
  </mapsources>
  <actions>
    <action caption='Filter' name='[Action1]'>
      <source dashboard='Flight Cancellation Dashboard' type='sheet' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Flight Cancellation Dashboard' />
      </command>
    </action>
    <action caption='Highlight1' name='[Action3]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Flight Cancellation Dashboard' type='sheet' />
      <command command='tsc:brush'>
        <param name='special-fields' value='all' />
        <param name='target' value='Flight Cancellation Dashboard' />
      </command>
    </action>
    <action caption='Filter2' name='[Action4]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Flight Cancellation Dashboard' type='sheet' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Flight Cancellation Dashboard' />
      </command>
    </action>
    <action caption='Highlight2' name='[Action5]'>
      <activation auto-clear='true' />
      <source dashboard='Flight Cancellation Dashboard' type='sheet' />
      <command command='tsc:brush'>
        <param name='special-fields' value='all' />
        <param name='target' value='Flight Cancellation Dashboard' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet lock-quick-filters='true' name='AUC'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#26794a'>&lt;</run>
            <run fontalignment='1' fontcolor='#26794a'>Sheet Name</run>
            <run fontalignment='1' fontcolor='#26794a'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='(GLM) AUC Value' datatype='real' name='[Calculation_2510527224812934]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='script_real(&quot;&#13;&#10;data.glm@model$auc&#13;&#10;&quot;,&#13;&#10;INDEX() &#13;&#10;)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Calculation_2510527224812934]' derivation='User' name='[usr:Calculation_2510527224812934:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity)]'>
            <groupfilter function='level-members' level='[OCity]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[none:OLat:qk]' />
              <groupfilter function='level-members' level='[none:OLong:qk]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]</column>
            <column>[csv.41677.501581817130].[Action (OCity)]</column>
            <column>[csv.41677.501581817130].[Action (OCity,Origin)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' value='58' />
            <format attr='width' value='112' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width-header' value='10' />
            <format attr='height-header' value='10' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='22' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[csv.41677.501581817130].[usr:Calculation_2510527224812934:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet lock-quick-filters='true' name='Flights By Airport'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontsize='11'>Outgoing flights and Cancellations by Airport</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='Cancellation Count By Airport' datatype='integer' name='[02 Flight Count By Airport (copy)]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx4 = match( .arg1 , origin_canFlights.R$Origin ) &#13;&#10;print(origin_canFlights.R[idx4,]$C1)&#13;&#10;origin_canFlights.R[idx4,]$C1&#13;&#10;&quot;,&#13;&#10;ATTR([Origin])&#13;&#10;)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Flight Count By Airport' datatype='integer' name='[02 Flight Count By Months (copy 2)]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx3 = match( .arg1 , originFlights.R$Origin ) &#13;&#10;print(originFlights.R[idx3,]$C1)&#13;&#10;originFlights.R[idx3,]$C1&#13;&#10;&quot;,&#13;&#10;ATTR([Origin])&#13;&#10;)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
            <column-instance column='[02 Flight Count By Airport (copy)]' derivation='User' name='[usr:02 Flight Count By Airport (copy):qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[csv.41677.501581817130].[none:OCity:nk]' ordering-type='Field' />
            </column-instance>
            <column-instance column='[02 Flight Count By Months (copy 2)]' derivation='User' name='[usr:02 Flight Count By Months (copy 2):qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[csv.41677.501581817130].[none:OCity:nk]' ordering-type='Field' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[none:OLat:qk]' />
              <groupfilter function='level-members' level='[none:OLong:qk]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[csv.41677.501581817130].[none:OCity:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Atlanta&quot;</bucket>
              <bucket>&quot;Dallas-Fort Worth&quot;</bucket>
              <bucket>&quot;Newark&quot;</bucket>
              <bucket>&quot;Boston&quot;</bucket>
              <bucket>&quot;Los Angeles&quot;</bucket>
              <bucket>&quot;Minneapolis&quot;</bucket>
              <bucket>&quot;San Francisco&quot;</bucket>
              <bucket>&quot;Philadelphia&quot;</bucket>
              <bucket>&quot;St. Louis&quot;</bucket>
              <bucket>&quot;Denver&quot;</bucket>
              <bucket>&quot;Charlotte&quot;</bucket>
              <bucket>&quot;Phoenix&quot;</bucket>
              <bucket>&quot;Pittsburgh&quot;</bucket>
              <bucket>&quot;Cincinnati&quot;</bucket>
              <bucket>&quot;Baltimore&quot;</bucket>
              <bucket>&quot;Las Vegas&quot;</bucket>
              <bucket>&quot;Cleveland&quot;</bucket>
              <bucket>&quot;Salt Lake City&quot;</bucket>
              <bucket>&quot;Memphis&quot;</bucket>
              <bucket>&quot;Orlando&quot;</bucket>
              <bucket>&quot;Miami&quot;</bucket>
              <bucket>&quot;San Diego&quot;</bucket>
              <bucket>&quot;Raleigh-durham&quot;</bucket>
              <bucket>&quot;Dallas&quot;</bucket>
              <bucket>&quot;San Jose&quot;</bucket>
              <bucket>&quot;Oakland&quot;</bucket>
              <bucket>&quot;Tampa&quot;</bucket>
              <bucket>&quot;Santa Ana&quot;</bucket>
              <bucket>&quot;Nashville&quot;</bucket>
              <bucket>&quot;New Orleans&quot;</bucket>
              <bucket>&quot;Indianapolis&quot;</bucket>
              <bucket>&quot;Windsor Locks&quot;</bucket>
              <bucket>&quot;Milwaukee&quot;</bucket>
              <bucket>&quot;Buffalo&quot;</bucket>
              <bucket>&quot;Fort Lauderdale&quot;</bucket>
              <bucket>&quot;Austin&quot;</bucket>
              <bucket>&quot;San Antonio&quot;</bucket>
              <bucket>&quot;Anchorage&quot;</bucket>
              <bucket>&quot;Greensboro&quot;</bucket>
              <bucket>&quot;Ontario&quot;</bucket>
              <bucket>&quot;Richmond&quot;</bucket>
              <bucket>&quot;Sacramento&quot;</bucket>
              <bucket>&quot;Norfolk&quot;</bucket>
              <bucket>&quot;White Plains&quot;</bucket>
              <bucket>&quot;Providence&quot;</bucket>
              <bucket>&quot;Burbank&quot;</bucket>
              <bucket>&quot;Dayton&quot;</bucket>
              <bucket>&quot;Syracuse&quot;</bucket>
              <bucket>&quot;Louisville&quot;</bucket>
              <bucket>&quot;Tulsa&quot;</bucket>
              <bucket>&quot;Grand Rapids&quot;</bucket>
              <bucket>&quot;Jacksonville&quot;</bucket>
              <bucket>&quot;Oklahoma City&quot;</bucket>
              <bucket>&quot;Albuquerque&quot;</bucket>
              <bucket>&quot;Colorado Springs&quot;</bucket>
              <bucket>&quot;San Juan&quot;</bucket>
              <bucket>&quot;West Palm Beach&quot;</bucket>
              <bucket>&quot;Wichita&quot;</bucket>
              <bucket>&quot;Des Moines&quot;</bucket>
              <bucket>&quot;Little Rock&quot;</bucket>
              <bucket>&quot;Cedar Rapids&quot;</bucket>
              <bucket>&quot;Birmingham&quot;</bucket>
              <bucket>&quot;Omaha&quot;</bucket>
              <bucket>&quot;Reno&quot;</bucket>
              <bucket>&quot;Harrisburg&quot;</bucket>
              <bucket>&quot;Honolulu&quot;</bucket>
              <bucket>&quot;Manchester NH&quot;</bucket>
              <bucket>&quot;El Paso&quot;</bucket>
              <bucket>&quot;Madison&quot;</bucket>
              <bucket>&quot;Columbia&quot;</bucket>
              <bucket>&quot;Tucson&quot;</bucket>
              <bucket>&quot;Fort Myers&quot;</bucket>
              <bucket>&quot;Knoxville&quot;</bucket>
              <bucket>&quot;Allentown&quot;</bucket>
              <bucket>&quot;Huntsville&quot;</bucket>
              <bucket>&quot;Savannah&quot;</bucket>
              <bucket>&quot;Pensacola&quot;</bucket>
              <bucket>&quot;Jackson&quot;</bucket>
              <bucket>&quot;Islip&quot;</bucket>
              <bucket>&quot;Bentonville&quot;</bucket>
              <bucket>&quot;Spokane&quot;</bucket>
              <bucket>&quot;Kalamazoo&quot;</bucket>
              <bucket>&quot;Shreveport&quot;</bucket>
              <bucket>&quot;Fort Wayne&quot;</bucket>
              <bucket>&quot;Burlington&quot;</bucket>
              <bucket>&quot;Baton Rouge&quot;</bucket>
              <bucket>&quot;Santa Barbara&quot;</bucket>
              <bucket>&quot;Lexington KY&quot;</bucket>
              <bucket>&quot;Juneau&quot;</bucket>
              <bucket>&quot;Green Bay&quot;</bucket>
              <bucket>&quot;Lansing&quot;</bucket>
              <bucket>&quot;Saginaw&quot;</bucket>
              <bucket>&quot;Sioux Falls&quot;</bucket>
              <bucket>&quot;Moline&quot;</bucket>
              <bucket>&quot;Roanoke VA&quot;</bucket>
              <bucket>&quot;South Bend&quot;</bucket>
              <bucket>&quot;Lubbock&quot;</bucket>
              <bucket>&quot;Amarillo&quot;</bucket>
              <bucket>&quot;Palm Springs&quot;</bucket>
              <bucket>&quot;Fairbanks&quot;</bucket>
              <bucket>&quot;Evansville&quot;</bucket>
              <bucket>&quot;Akron&quot;</bucket>
              <bucket>&quot;Mobile&quot;</bucket>
              <bucket>&quot;Fresno&quot;</bucket>
              <bucket>&quot;Midland&quot;</bucket>
              <bucket>&quot;Chattanooga&quot;</bucket>
              <bucket>&quot;Bangor&quot;</bucket>
              <bucket>&quot;Peoria&quot;</bucket>
              <bucket>&quot;Tallahassee&quot;</bucket>
              <bucket>&quot;Sarasota&quot;</bucket>
              <bucket>&quot;Corpus Christi&quot;</bucket>
              <bucket>&quot;Harlingen&quot;</bucket>
              <bucket>&quot;Fargo&quot;</bucket>
              <bucket>&quot;Toledo&quot;</bucket>
              <bucket>&quot;Kahului&quot;</bucket>
              <bucket>&quot;Boise&quot;</bucket>
              <bucket>&quot;Eugene&quot;</bucket>
              <bucket>&quot;Monterey&quot;</bucket>
              <bucket>&quot;Myrtle Beach&quot;</bucket>
              <bucket>&quot;BRISTOL&quot;</bucket>
              <bucket>&quot;Long Beach&quot;</bucket>
              <bucket>&quot;Lincoln&quot;</bucket>
              <bucket>&quot;Asheville&quot;</bucket>
              <bucket>&quot;Unalaska&quot;</bucket>
              <bucket>&quot;Newburgh&quot;</bucket>
              <bucket>&quot;Aspen&quot;</bucket>
              <bucket>&quot;Billings&quot;</bucket>
              <bucket>&quot;Valparaiso&quot;</bucket>
              <bucket>&quot;Bush Field&quot;</bucket>
              <bucket>&quot;Hailey&quot;</bucket>
              <bucket>&quot;Great Falls&quot;</bucket>
              <bucket>&quot;Appleton&quot;</bucket>
              <bucket>&quot;Traverse City&quot;</bucket>
              <bucket>&quot;Bloomington&quot;</bucket>
              <bucket>&quot;Flint&quot;</bucket>
              <bucket>&quot;Gulfport&quot;</bucket>
              <bucket>&quot;Scranton&quot;</bucket>
              <bucket>&quot;Medford&quot;</bucket>
              <bucket>&quot;Rapid City&quot;</bucket>
              <bucket>&quot;MONTGOMERY&quot;</bucket>
              <bucket>&quot;Duluth&quot;</bucket>
              <bucket>&quot;Champaign&quot;</bucket>
              <bucket>&quot;Bozeman&quot;</bucket>
              <bucket>&quot;Daytona Beach&quot;</bucket>
              <bucket>&quot;Jacksn Hole&quot;</bucket>
              <bucket>&quot;St. Thomas&quot;</bucket>
              <bucket>&quot;San Luis Obispo&quot;</bucket>
              <bucket>&quot;Missoula&quot;</bucket>
              <bucket>&quot;Lafayette&quot;</bucket>
              <bucket>&quot;La Crosse&quot;</bucket>
              <bucket>&quot;Ketchikan&quot;</bucket>
              <bucket>&quot;Worcester&quot;</bucket>
              <bucket>&quot;Petersburg&quot;</bucket>
              <bucket>&quot;Melbourne&quot;</bucket>
              <bucket>&quot;Newport News&quot;</bucket>
              <bucket>&quot;Kodiak&quot;</bucket>
              <bucket>&quot;Fayetteville&quot;</bucket>
              <bucket>&quot;Mcallen&quot;</bucket>
              <bucket>&quot;Binghamton&quot;</bucket>
              <bucket>&quot;Lihue&quot;</bucket>
              <bucket>&quot;Waco&quot;</bucket>
              <bucket>&quot;Grand Junction&quot;</bucket>
              <bucket>&quot;Arcata CA&quot;</bucket>
              <bucket>&quot;Nome&quot;</bucket>
              <bucket>&quot;Monroe&quot;</bucket>
              <bucket>&quot;Gainesville&quot;</bucket>
              <bucket>&quot;Flagstaff&quot;</bucket>
              <bucket>&quot;College Station&quot;</bucket>
              <bucket>&quot;Kotzebue&quot;</bucket>
              <bucket>&quot;Bismarck&quot;</bucket>
              <bucket>&quot;Bakersfield&quot;</bucket>
              <bucket>&quot;Dubuque IA&quot;</bucket>
              <bucket>&quot;Wichita Falls&quot;</bucket>
              <bucket>&quot;Charlottesville VA&quot;</bucket>
              <bucket>&quot;Wrangell&quot;</bucket>
              <bucket>&quot;Hayden&quot;</bucket>
              <bucket>&quot;Idaho Falls&quot;</bucket>
              <bucket>&quot;Huntington&quot;</bucket>
              <bucket>&quot;Erie&quot;</bucket>
              <bucket>&quot;Barrow&quot;</bucket>
              <bucket>&quot;Panama City&quot;</bucket>
              <bucket>&quot;Tyler&quot;</bucket>
              <bucket>&quot;St. Croix Island&quot;</bucket>
              <bucket>&quot;Kona&quot;</bucket>
              <bucket>&quot;Grand Forks&quot;</bucket>
              <bucket>&quot;Bethel&quot;</bucket>
              <bucket>&quot;Durango&quot;</bucket>
              <bucket>&quot;Casper&quot;</bucket>
              <bucket>&quot;Butte&quot;</bucket>
              <bucket>&quot;San Angelo&quot;</bucket>
              <bucket>&quot;Pasco&quot;</bucket>
              <bucket>&quot;Modesto&quot;</bucket>
              <bucket>&quot;Key West&quot;</bucket>
              <bucket>&quot;Ithaca&quot;</bucket>
              <bucket>&quot;Elko&quot;</bucket>
              <bucket>&quot;Vail&quot;</bucket>
              <bucket>&quot;Lawton&quot;</bucket>
              <bucket>&quot;Elmira&quot;</bucket>
              <bucket>&quot;Montrose CO&quot;</bucket>
              <bucket>&quot;Fort Smith&quot;</bucket>
              <bucket>&quot;Dothan&quot;</bucket>
              <bucket>&quot;Alexandria&quot;</bucket>
              <bucket>&quot;Texarkana&quot;</bucket>
              <bucket>&quot;Laredo&quot;</bucket>
              <bucket>&quot;Helena&quot;</bucket>
              <bucket>&quot;Deadhorse&quot;</bucket>
              <bucket>&quot;Cordova&quot;</bucket>
              <bucket>&quot;Yuma&quot;</bucket>
              <bucket>&quot;Wassau&quot;</bucket>
              <bucket>&quot;Sitka&quot;</bucket>
              <bucket>&quot;New Haven&quot;</bucket>
              <bucket>&quot;Lynchburg&quot;</bucket>
              <bucket>&quot;Kalispell&quot;</bucket>
              <bucket>&quot;Sioux City&quot;</bucket>
              <bucket>&quot;Redding&quot;</bucket>
              <bucket>&quot;Agana&quot;</bucket>
              <bucket>&quot;Jacksonville NC&quot;</bucket>
              <bucket>&quot;Abilene&quot;</bucket>
              <bucket>&quot;Valdosta&quot;</bucket>
              <bucket>&quot;Saipan&quot;</bucket>
              <bucket>&quot;Marquette&quot;</bucket>
              <bucket>&quot;Brownsville&quot;</bucket>
              <bucket>&quot;Santa Maria&quot;</bucket>
              <bucket>&quot;King Salmon&quot;</bucket>
              <bucket>&quot;South Lake Tahoe&quot;</bucket>
              <bucket>&quot;Dillingham&quot;</bucket>
              <bucket>&quot;State College Pennsylvania&quot;</bucket>
              <bucket>&quot;Inyokern&quot;</bucket>
              <bucket>&quot;Columbus Mississippi&quot;</bucket>
              <bucket>&quot;Meridian&quot;</bucket>
              <bucket>&quot;Macon&quot;</bucket>
              <bucket>&quot;Longview&quot;</bucket>
              <bucket>&quot;Grand Canyon&quot;</bucket>
              <bucket>&quot;Carlsbad&quot;</bucket>
              <bucket>&quot;Beaumont&quot;</bucket>
              <bucket>&quot;Yakutat&quot;</bucket>
              <bucket>&quot;Redmond-Bend&quot;</bucket>
              <bucket>&quot;Kinston&quot;</bucket>
              <bucket>&quot;Gunnison&quot;</bucket>
              <bucket>&quot;Florence&quot;</bucket>
              <bucket>&quot;Twin Falls&quot;</bucket>
              <bucket>&quot;Rota&quot;</bucket>
              <bucket>&quot;Atlantic City&quot;</bucket>
              <bucket>&quot;Waterloo&quot;</bucket>
              <bucket>&quot;Visalia&quot;</bucket>
              <bucket>&quot;Pocatello&quot;</bucket>
              <bucket>&quot;Lake Charles&quot;</bucket>
              <bucket>&quot;Hilo&quot;</bucket>
              <bucket>&quot;Chico&quot;</bucket>
              <bucket>&quot;Bellingham&quot;</bucket>
              <bucket>&quot;Trenton&quot;</bucket>
              <bucket>&quot;Saint George&quot;</bucket>
              <bucket>&quot;Naples&quot;</bucket>
              <bucket>&quot;Crescent City&quot;</bucket>
              <bucket>&quot;Utica&quot;</bucket>
              <bucket>&quot;Tupelo&quot;</bucket>
              <bucket>&quot;Telluride&quot;</bucket>
              <bucket>&quot;Nantucket&quot;</bucket>
              <bucket>&quot;Babelthuap&quot;</bucket>
              <bucket>&quot;Victoria&quot;</bucket>
              <bucket>&quot;Stockton&quot;</bucket>
              <bucket>&quot;St Mary&apos;s&quot;</bucket>
              <bucket>&quot;Pueblo&quot;</bucket>
              <bucket>&quot;Imperial&quot;</bucket>
              <bucket>&quot;Brunswick&quot;</bucket>
              <bucket>&quot;Aguadilla&quot;</bucket>
              <bucket>&quot;St. Petersburg&quot;</bucket>
              <bucket>&quot;Palmdale&quot;</bucket>
              <bucket>&quot;Oxnard&quot;</bucket>
              <bucket>&quot;Gustavus&quot;</bucket>
              <bucket>&quot;Cody&quot;</bucket>
              <bucket>&quot;Cedar City&quot;</bucket>
              <bucket>&quot;West Yellowstone&quot;</bucket>
              <bucket>&quot;Concord&quot;</bucket>
              <bucket>&quot;New Bern&quot;</bucket>
              <bucket>&quot;Hilton Head&quot;</bucket>
              <bucket>&quot;Hancock&quot;</bucket>
              <bucket>&quot;Salem&quot;</bucket>
              <bucket>&quot;Rockford&quot;</bucket>
              <bucket>&quot;Rock Springs&quot;</bucket>
              <bucket>&quot;Ponce&quot;</bucket>
              <bucket>&quot;Pinehurst-Southern Pines&quot;</bucket>
              <bucket>&quot;Pellston&quot;</bucket>
              <bucket>&quot;Mayaguez&quot;</bucket>
              <bucket>&quot;Lewisburg&quot;</bucket>
              <bucket>&quot;International Falls&quot;</bucket>
              <bucket>&quot;Hickory&quot;</bucket>
              <bucket>&quot;Eau Claire&quot;</bucket>
              <bucket>&quot;Adak Island&quot;</bucket>
              <bucket>&quot;Yap&quot;</bucket>
              <bucket>&quot;Yakima&quot;</bucket>
              <bucket>&quot;Roswell&quot;</bucket>
              <bucket>&quot;Rhinelander&quot;</bucket>
              <bucket>&quot;Red River&quot;</bucket>
              <bucket>&quot;North Bend&quot;</bucket>
              <bucket>&quot;Muskegon&quot;</bucket>
              <bucket>&quot;Molokai&quot;</bucket>
              <bucket>&quot;Marathon&quot;</bucket>
              <bucket>&quot;Lewiston&quot;</bucket>
              <bucket>&quot;Lanai&quot;</bucket>
              <bucket>&quot;Klamath Falls&quot;</bucket>
              <bucket>&quot;Gillette&quot;</bucket>
              <bucket>&quot;Bemidji&quot;</bucket>
              <bucket>&quot;Aniak&quot;</bucket>
              <bucket>&quot;Wilmington&quot;</bucket>
              <bucket>&quot;Washington&quot;</bucket>
              <bucket>&quot;Springfield&quot;</bucket>
              <bucket>&quot;Seattle&quot;</bucket>
              <bucket>&quot;Scottsbluff&quot;</bucket>
              <bucket>&quot;Rochester&quot;</bucket>
              <bucket>&quot;Provo&quot;</bucket>
              <bucket>&quot;Portland&quot;</bucket>
              <bucket>&quot;Pierre&quot;</bucket>
              <bucket>&quot;Ogden&quot;</bucket>
              <bucket>&quot;New York&quot;</bucket>
              <bucket>&quot;Minot&quot;</bucket>
              <bucket>&quot;Killeen&quot;</bucket>
              <bucket>&quot;Kansas City&quot;</bucket>
              <bucket>&quot;Houston&quot;</bucket>
              <bucket>&quot;Greenville&quot;</bucket>
              <bucket>&quot;Farmington&quot;</bucket>
              <bucket>&quot;Detroit&quot;</bucket>
              <bucket>&quot;Columbus&quot;</bucket>
              <bucket>&quot;Clarksburg&quot;</bucket>
              <bucket>&quot;Chicago&quot;</bucket>
              <bucket>&quot;Cheyenne&quot;</bucket>
              <bucket>&quot;Charleston&quot;</bucket>
              <bucket>&quot;Albany&quot;</bucket>
              <bucket>%null%</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[csv.41677.501581817130].[none:Origin:nk]'>
            <groupfilter function='level-members' level='[none:Origin:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <sort class='manual' column='[csv.41677.501581817130].[none:Origin:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;ORD&quot;</bucket>
              <bucket>&quot;ATL&quot;</bucket>
              <bucket>&quot;DFW&quot;</bucket>
              <bucket>&quot;LGA&quot;</bucket>
              <bucket>&quot;EWR&quot;</bucket>
              <bucket>&quot;BOS&quot;</bucket>
              <bucket>&quot;LAX&quot;</bucket>
              <bucket>&quot;DTW&quot;</bucket>
              <bucket>&quot;MSP&quot;</bucket>
              <bucket>&quot;DCA&quot;</bucket>
              <bucket>&quot;SFO&quot;</bucket>
              <bucket>&quot;PHL&quot;</bucket>
              <bucket>&quot;STL&quot;</bucket>
              <bucket>&quot;DEN&quot;</bucket>
              <bucket>&quot;CLT&quot;</bucket>
              <bucket>&quot;PHX&quot;</bucket>
              <bucket>&quot;PIT&quot;</bucket>
              <bucket>&quot;CVG&quot;</bucket>
              <bucket>&quot;IAH&quot;</bucket>
              <bucket>&quot;IAD&quot;</bucket>
              <bucket>&quot;JFK&quot;</bucket>
              <bucket>&quot;SEA&quot;</bucket>
              <bucket>&quot;BWI&quot;</bucket>
              <bucket>&quot;LAS&quot;</bucket>
              <bucket>&quot;CLE&quot;</bucket>
              <bucket>&quot;SLC&quot;</bucket>
              <bucket>&quot;HOU&quot;</bucket>
              <bucket>&quot;MEM&quot;</bucket>
              <bucket>&quot;MCO&quot;</bucket>
              <bucket>&quot;MIA&quot;</bucket>
              <bucket>&quot;SAN&quot;</bucket>
              <bucket>&quot;RDU&quot;</bucket>
              <bucket>&quot;DAL&quot;</bucket>
              <bucket>&quot;MDW&quot;</bucket>
              <bucket>&quot;CMH&quot;</bucket>
              <bucket>&quot;MCI&quot;</bucket>
              <bucket>&quot;SJC&quot;</bucket>
              <bucket>&quot;OAK&quot;</bucket>
              <bucket>&quot;TPA&quot;</bucket>
              <bucket>&quot;SNA&quot;</bucket>
              <bucket>&quot;PDX&quot;</bucket>
              <bucket>&quot;BNA&quot;</bucket>
              <bucket>&quot;MSY&quot;</bucket>
              <bucket>&quot;IND&quot;</bucket>
              <bucket>&quot;BDL&quot;</bucket>
              <bucket>&quot;MKE&quot;</bucket>
              <bucket>&quot;BUF&quot;</bucket>
              <bucket>&quot;FLL&quot;</bucket>
              <bucket>&quot;ROC&quot;</bucket>
              <bucket>&quot;AUS&quot;</bucket>
              <bucket>&quot;SAT&quot;</bucket>
              <bucket>&quot;ANC&quot;</bucket>
              <bucket>&quot;GSO&quot;</bucket>
              <bucket>&quot;ONT&quot;</bucket>
              <bucket>&quot;RIC&quot;</bucket>
              <bucket>&quot;SMF&quot;</bucket>
              <bucket>&quot;ORF&quot;</bucket>
              <bucket>&quot;HPN&quot;</bucket>
              <bucket>&quot;PVD&quot;</bucket>
              <bucket>&quot;BUR&quot;</bucket>
              <bucket>&quot;DAY&quot;</bucket>
              <bucket>&quot;SYR&quot;</bucket>
              <bucket>&quot;SDF&quot;</bucket>
              <bucket>&quot;TUL&quot;</bucket>
              <bucket>&quot;GRR&quot;</bucket>
              <bucket>&quot;JAX&quot;</bucket>
              <bucket>&quot;OKC&quot;</bucket>
              <bucket>&quot;ABQ&quot;</bucket>
              <bucket>&quot;COS&quot;</bucket>
              <bucket>&quot;SJU&quot;</bucket>
              <bucket>&quot;GSP&quot;</bucket>
              <bucket>&quot;ALB&quot;</bucket>
              <bucket>&quot;PBI&quot;</bucket>
              <bucket>&quot;PWM&quot;</bucket>
              <bucket>&quot;CHS&quot;</bucket>
              <bucket>&quot;ICT&quot;</bucket>
              <bucket>&quot;DSM&quot;</bucket>
              <bucket>&quot;LIT&quot;</bucket>
              <bucket>&quot;CID&quot;</bucket>
              <bucket>&quot;BHM&quot;</bucket>
              <bucket>&quot;OMA&quot;</bucket>
              <bucket>&quot;RNO&quot;</bucket>
              <bucket>&quot;MDT&quot;</bucket>
              <bucket>&quot;HNL&quot;</bucket>
              <bucket>&quot;MHT&quot;</bucket>
              <bucket>&quot;ELP&quot;</bucket>
              <bucket>&quot;MSN&quot;</bucket>
              <bucket>&quot;CAE&quot;</bucket>
              <bucket>&quot;TUS&quot;</bucket>
              <bucket>&quot;RSW&quot;</bucket>
              <bucket>&quot;TYS&quot;</bucket>
              <bucket>&quot;ABE&quot;</bucket>
              <bucket>&quot;HSV&quot;</bucket>
              <bucket>&quot;SAV&quot;</bucket>
              <bucket>&quot;PNS&quot;</bucket>
              <bucket>&quot;JAN&quot;</bucket>
              <bucket>&quot;ISP&quot;</bucket>
              <bucket>&quot;XNA&quot;</bucket>
              <bucket>&quot;GEG&quot;</bucket>
              <bucket>&quot;AZO&quot;</bucket>
              <bucket>&quot;SHV&quot;</bucket>
              <bucket>&quot;SGF&quot;</bucket>
              <bucket>&quot;FWA&quot;</bucket>
              <bucket>&quot;BTV&quot;</bucket>
              <bucket>&quot;BTR&quot;</bucket>
              <bucket>&quot;RST&quot;</bucket>
              <bucket>&quot;SBA&quot;</bucket>
              <bucket>&quot;LEX&quot;</bucket>
              <bucket>&quot;JNU&quot;</bucket>
              <bucket>&quot;GRB&quot;</bucket>
              <bucket>&quot;LAN&quot;</bucket>
              <bucket>&quot;MBS&quot;</bucket>
              <bucket>&quot;FSD&quot;</bucket>
              <bucket>&quot;MLI&quot;</bucket>
              <bucket>&quot;ROA&quot;</bucket>
              <bucket>&quot;SBN&quot;</bucket>
              <bucket>&quot;LBB&quot;</bucket>
              <bucket>&quot;AMA&quot;</bucket>
              <bucket>&quot;PSP&quot;</bucket>
              <bucket>&quot;FAI&quot;</bucket>
              <bucket>&quot;EVV&quot;</bucket>
              <bucket>&quot;CAK&quot;</bucket>
              <bucket>&quot;CRW&quot;</bucket>
              <bucket>&quot;MOB&quot;</bucket>
              <bucket>&quot;FAT&quot;</bucket>
              <bucket>&quot;MAF&quot;</bucket>
              <bucket>&quot;CHA&quot;</bucket>
              <bucket>&quot;BGR&quot;</bucket>
              <bucket>&quot;PIA&quot;</bucket>
              <bucket>&quot;TLH&quot;</bucket>
              <bucket>&quot;SRQ&quot;</bucket>
              <bucket>&quot;CRP&quot;</bucket>
              <bucket>&quot;HRL&quot;</bucket>
              <bucket>&quot;FAR&quot;</bucket>
              <bucket>&quot;TOL&quot;</bucket>
              <bucket>&quot;OGG&quot;</bucket>
              <bucket>&quot;BOI&quot;</bucket>
              <bucket>&quot;EUG&quot;</bucket>
              <bucket>&quot;MRY&quot;</bucket>
              <bucket>&quot;MYR&quot;</bucket>
              <bucket>&quot;TRI&quot;</bucket>
              <bucket>&quot;LNK&quot;</bucket>
              <bucket>&quot;LGB&quot;</bucket>
              <bucket>&quot;ILM&quot;</bucket>
              <bucket>&quot;AVL&quot;</bucket>
              <bucket>&quot;SWF&quot;</bucket>
              <bucket>&quot;DUT&quot;</bucket>
              <bucket>&quot;ASE&quot;</bucket>
              <bucket>&quot;BIL&quot;</bucket>
              <bucket>&quot;VPS&quot;</bucket>
              <bucket>&quot;AGS&quot;</bucket>
              <bucket>&quot;SUN&quot;</bucket>
              <bucket>&quot;GTF&quot;</bucket>
              <bucket>&quot;ATW&quot;</bucket>
              <bucket>&quot;TVC&quot;</bucket>
              <bucket>&quot;BMI&quot;</bucket>
              <bucket>&quot;FNT&quot;</bucket>
              <bucket>&quot;GPT&quot;</bucket>
              <bucket>&quot;MFR&quot;</bucket>
              <bucket>&quot;AVP&quot;</bucket>
              <bucket>&quot;RAP&quot;</bucket>
              <bucket>&quot;MGM&quot;</bucket>
              <bucket>&quot;DLH&quot;</bucket>
              <bucket>&quot;CMI&quot;</bucket>
              <bucket>&quot;BZN&quot;</bucket>
              <bucket>&quot;DAB&quot;</bucket>
              <bucket>&quot;JAC&quot;</bucket>
              <bucket>&quot;STT&quot;</bucket>
              <bucket>&quot;SBP&quot;</bucket>
              <bucket>&quot;MSO&quot;</bucket>
              <bucket>&quot;LSE&quot;</bucket>
              <bucket>&quot;LFT&quot;</bucket>
              <bucket>&quot;KTN&quot;</bucket>
              <bucket>&quot;ORH&quot;</bucket>
              <bucket>&quot;PSG&quot;</bucket>
              <bucket>&quot;MLB&quot;</bucket>
              <bucket>&quot;PHF&quot;</bucket>
              <bucket>&quot;FAY&quot;</bucket>
              <bucket>&quot;ADQ&quot;</bucket>
              <bucket>&quot;MFE&quot;</bucket>
              <bucket>&quot;GRK&quot;</bucket>
              <bucket>&quot;CSG&quot;</bucket>
              <bucket>&quot;BGM&quot;</bucket>
              <bucket>&quot;LIH&quot;</bucket>
              <bucket>&quot;GJT&quot;</bucket>
              <bucket>&quot;ACV&quot;</bucket>
              <bucket>&quot;ACT&quot;</bucket>
              <bucket>&quot;OME&quot;</bucket>
              <bucket>&quot;MLU&quot;</bucket>
              <bucket>&quot;GNV&quot;</bucket>
              <bucket>&quot;FLG&quot;</bucket>
              <bucket>&quot;CLL&quot;</bucket>
              <bucket>&quot;OTZ&quot;</bucket>
              <bucket>&quot;BIS&quot;</bucket>
              <bucket>&quot;BFL&quot;</bucket>
              <bucket>&quot;DBQ&quot;</bucket>
              <bucket>&quot;SPS&quot;</bucket>
              <bucket>&quot;CHO&quot;</bucket>
              <bucket>&quot;WRG&quot;</bucket>
              <bucket>&quot;HDN&quot;</bucket>
              <bucket>&quot;IDA&quot;</bucket>
              <bucket>&quot;HTS&quot;</bucket>
              <bucket>&quot;ILE&quot;</bucket>
              <bucket>&quot;ERI&quot;</bucket>
              <bucket>&quot;BRW&quot;</bucket>
              <bucket>&quot;PFN&quot;</bucket>
              <bucket>&quot;TYR&quot;</bucket>
              <bucket>&quot;STX&quot;</bucket>
              <bucket>&quot;KOA&quot;</bucket>
              <bucket>&quot;GFK&quot;</bucket>
              <bucket>&quot;DET&quot;</bucket>
              <bucket>&quot;BET&quot;</bucket>
              <bucket>&quot;DRO&quot;</bucket>
              <bucket>&quot;CPR&quot;</bucket>
              <bucket>&quot;BTM&quot;</bucket>
              <bucket>&quot;SJT&quot;</bucket>
              <bucket>&quot;PSC&quot;</bucket>
              <bucket>&quot;MOD&quot;</bucket>
              <bucket>&quot;ITH&quot;</bucket>
              <bucket>&quot;EYW&quot;</bucket>
              <bucket>&quot;EKO&quot;</bucket>
              <bucket>&quot;LAW&quot;</bucket>
              <bucket>&quot;ELM&quot;</bucket>
              <bucket>&quot;EGE&quot;</bucket>
              <bucket>&quot;MTJ&quot;</bucket>
              <bucket>&quot;FSM&quot;</bucket>
              <bucket>&quot;DHN&quot;</bucket>
              <bucket>&quot;AEX&quot;</bucket>
              <bucket>&quot;TXK&quot;</bucket>
              <bucket>&quot;SCC&quot;</bucket>
              <bucket>&quot;LRD&quot;</bucket>
              <bucket>&quot;HLN&quot;</bucket>
              <bucket>&quot;CDV&quot;</bucket>
              <bucket>&quot;YUM&quot;</bucket>
              <bucket>&quot;SIT&quot;</bucket>
              <bucket>&quot;LYH&quot;</bucket>
              <bucket>&quot;HVN&quot;</bucket>
              <bucket>&quot;FCA&quot;</bucket>
              <bucket>&quot;CWA&quot;</bucket>
              <bucket>&quot;SUX&quot;</bucket>
              <bucket>&quot;RDD&quot;</bucket>
              <bucket>&quot;GUM&quot;</bucket>
              <bucket>&quot;OAJ&quot;</bucket>
              <bucket>&quot;ABI&quot;</bucket>
              <bucket>&quot;VLD&quot;</bucket>
              <bucket>&quot;SPN&quot;</bucket>
              <bucket>&quot;SPI&quot;</bucket>
              <bucket>&quot;MQT&quot;</bucket>
              <bucket>&quot;BRO&quot;</bucket>
              <bucket>&quot;SMX&quot;</bucket>
              <bucket>&quot;MOT&quot;</bucket>
              <bucket>&quot;AKN&quot;</bucket>
              <bucket>&quot;TVL&quot;</bucket>
              <bucket>&quot;DLG&quot;</bucket>
              <bucket>&quot;SCE&quot;</bucket>
              <bucket>&quot;IYK&quot;</bucket>
              <bucket>&quot;GTR&quot;</bucket>
              <bucket>&quot;MEI&quot;</bucket>
              <bucket>&quot;MCN&quot;</bucket>
              <bucket>&quot;GGG&quot;</bucket>
              <bucket>&quot;GCN&quot;</bucket>
              <bucket>&quot;CLD&quot;</bucket>
              <bucket>&quot;BPT&quot;</bucket>
              <bucket>&quot;YAK&quot;</bucket>
              <bucket>&quot;RDM&quot;</bucket>
              <bucket>&quot;ISO&quot;</bucket>
              <bucket>&quot;GUC&quot;</bucket>
              <bucket>&quot;FLO&quot;</bucket>
              <bucket>&quot;TWF&quot;</bucket>
              <bucket>&quot;ROP&quot;</bucket>
              <bucket>&quot;ABY&quot;</bucket>
              <bucket>&quot;EFD&quot;</bucket>
              <bucket>&quot;ACY&quot;</bucket>
              <bucket>&quot;VIS&quot;</bucket>
              <bucket>&quot;PIH&quot;</bucket>
              <bucket>&quot;LCH&quot;</bucket>
              <bucket>&quot;ITO&quot;</bucket>
              <bucket>&quot;CIC&quot;</bucket>
              <bucket>&quot;BLI&quot;</bucket>
              <bucket>&quot;ALO&quot;</bucket>
              <bucket>&quot;TTN&quot;</bucket>
              <bucket>&quot;SGU&quot;</bucket>
              <bucket>&quot;CEC&quot;</bucket>
              <bucket>&quot;APF&quot;</bucket>
              <bucket>&quot;UCA&quot;</bucket>
              <bucket>&quot;TUP&quot;</bucket>
              <bucket>&quot;TEX&quot;</bucket>
              <bucket>&quot;ROR&quot;</bucket>
              <bucket>&quot;ACK&quot;</bucket>
              <bucket>&quot;VCT&quot;</bucket>
              <bucket>&quot;SCK&quot;</bucket>
              <bucket>&quot;PUB&quot;</bucket>
              <bucket>&quot;KSM&quot;</bucket>
              <bucket>&quot;IPL&quot;</bucket>
              <bucket>&quot;BQN&quot;</bucket>
              <bucket>&quot;BQK&quot;</bucket>
              <bucket>&quot;PMD&quot;</bucket>
              <bucket>&quot;PIE&quot;</bucket>
              <bucket>&quot;OXR&quot;</bucket>
              <bucket>&quot;GST&quot;</bucket>
              <bucket>&quot;COD&quot;</bucket>
              <bucket>&quot;CDC&quot;</bucket>
              <bucket>&quot;WYS&quot;</bucket>
              <bucket>&quot;CCR&quot;</bucket>
              <bucket>&quot;HHH&quot;</bucket>
              <bucket>&quot;EWN&quot;</bucket>
              <bucket>&quot;CMX&quot;</bucket>
              <bucket>&quot;SOP&quot;</bucket>
              <bucket>&quot;SLE&quot;</bucket>
              <bucket>&quot;RKS&quot;</bucket>
              <bucket>&quot;RFD&quot;</bucket>
              <bucket>&quot;PSE&quot;</bucket>
              <bucket>&quot;PLN&quot;</bucket>
              <bucket>&quot;MAZ&quot;</bucket>
              <bucket>&quot;LWB&quot;</bucket>
              <bucket>&quot;INL&quot;</bucket>
              <bucket>&quot;HKY&quot;</bucket>
              <bucket>&quot;EAU&quot;</bucket>
              <bucket>&quot;ADK&quot;</bucket>
              <bucket>&quot;YKM&quot;</bucket>
              <bucket>&quot;YAP&quot;</bucket>
              <bucket>&quot;ROW&quot;</bucket>
              <bucket>&quot;RHI&quot;</bucket>
              <bucket>&quot;RDR&quot;</bucket>
              <bucket>&quot;OTH&quot;</bucket>
              <bucket>&quot;MTH&quot;</bucket>
              <bucket>&quot;MKK&quot;</bucket>
              <bucket>&quot;MKG&quot;</bucket>
              <bucket>&quot;MIB&quot;</bucket>
              <bucket>&quot;LWS&quot;</bucket>
              <bucket>&quot;LNY&quot;</bucket>
              <bucket>&quot;LMT&quot;</bucket>
              <bucket>&quot;ILG&quot;</bucket>
              <bucket>&quot;GCC&quot;</bucket>
              <bucket>&quot;BJI&quot;</bucket>
              <bucket>&quot;ANI&quot;</bucket>
              <bucket>&quot;PVU&quot;</bucket>
              <bucket>&quot;PIR&quot;</bucket>
              <bucket>&quot;OGD&quot;</bucket>
              <bucket>&quot;MKC&quot;</bucket>
              <bucket>&quot;GLH&quot;</bucket>
              <bucket>&quot;FMN&quot;</bucket>
              <bucket>&quot;CYS&quot;</bucket>
              <bucket>&quot;CKB&quot;</bucket>
              <bucket>&quot;BFI&quot;</bucket>
              <bucket>&quot;BFF&quot;</bucket>
              <bucket>%null%</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[csv.41677.501581817130].[none:Origin:nk]</column>
            <column>[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[csv.41677.501581817130].[none:OCity:nk]' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='stroke-color' id='refline0' value='#000000' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='div-level' scope='rows' value='10' />
            <format attr='div-level' scope='cols' value='10' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <lod column='[csv.41677.501581817130].[usr:02 Flight Count By Months (copy 2):qk:1]' />
            </encodings>
            <reference-line axis-column='[csv.41677.501581817130].[usr:02 Flight Count By Airport (copy):qk:1]' formula='average' id='refline0' label-type='none' scope='per-cell' value-column='[csv.41677.501581817130].[usr:02 Flight Count By Months (copy 2):qk:1]' z-order='2' />
            <reference-line axis-column='[csv.41677.501581817130].[usr:02 Flight Count By Airport (copy):qk:1]' fill-above='true' fill-below='true' formula='average' id='refline1' label-type='none' percentage-bands='true' scope='per-cell' symmetric='false' value-column='[csv.41677.501581817130].[usr:02 Flight Count By Months (copy 2):qk:1]' z-order='1'>
              <reference-line-value percentage='60' />
              <reference-line-value percentage='80' />
            </reference-line>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='shape' value=':filled/plus' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[csv.41677.501581817130].[usr:02 Flight Count By Airport (copy):qk:1]</rows>
        <cols>([csv.41677.501581817130].[none:OCity:nk] / [csv.41677.501581817130].[none:Origin:nk])</cols>
      </table>
    </worksheet>
    <worksheet lock-quick-filters='true' name='Flights By Month'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Number of Flights by Month</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='Cancellation Count By Months' datatype='integer' name='[02 Flight Count By Months (copy)]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx2 = match( .arg1 , canFlights.R$Month ) &#13;&#10;print(canFlights.R[idx2,]$C1)&#13;&#10;if ( !is.na( .arg1 ) ) { canFlights.R[idx2,]$C1&#13;&#10;} else {&apos;Filter out Null values&apos;}&#13;&#10;&quot;,&#13;&#10;ATTR([Month])&#13;&#10;)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Flight Count By Months' datatype='integer' name='[Calculation_1340527151300682]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx = match( .arg1 , numFlights.R$Month ) &#13;&#10;print(numFlights.R[idx,]$C1)&#13;&#10;if ( !is.na( .arg1 ) ) { numFlights.R[idx,]$C1&#13;&#10;} else {&apos;Filter out Null values&apos;}&#13;&#10;&quot;,&#13;&#10;ATTR([Month])&#13;&#10;)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='real' datatype-customized='true' name='[Month]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Month]' derivation='None' name='[none:Month:qk]' pivot='key' type='quantitative' />
            <column-instance column='[02 Flight Count By Months (copy)]' derivation='User' name='[usr:02 Flight Count By Months (copy):qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[csv.41677.501581817130].[none:Month:qk]' ordering-type='Field' />
            </column-instance>
            <column-instance column='[Calculation_1340527151300682]' derivation='User' name='[usr:Calculation_1340527151300682:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[csv.41677.501581817130].[none:Month:qk]' ordering-type='Field' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity)]'>
            <groupfilter function='level-members' level='[OCity]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[none:OLat:qk]' />
              <groupfilter function='level-members' level='[none:OLong:qk]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[csv.41677.501581817130].[none:Month:qk]' included-values='non-null'>
          </filter>
          <slices>
            <column>[csv.41677.501581817130].[none:Month:qk]</column>
            <column>[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]</column>
            <column>[csv.41677.501581817130].[Action (OCity)]</column>
            <column>[csv.41677.501581817130].[Action (OCity,Origin)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[usr:Calculation_1340527151300682:qk:1]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[csv.41677.501581817130].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='1' y-axis-name='[csv.41677.501581817130].[usr:02 Flight Count By Months (copy):qk:1]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[csv.41677.501581817130].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[csv.41677.501581817130].[usr:Calculation_1340527151300682:qk:1]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[csv.41677.501581817130].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([csv.41677.501581817130].[usr:02 Flight Count By Months (copy):qk:1] + [csv.41677.501581817130].[usr:Calculation_1340527151300682:qk:1])</rows>
        <cols>[csv.41677.501581817130].[none:Month:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Geo Map'>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Online' />
          </mapsources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='(GLM) Variable Coefficients' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column aggregation='Avg' datatype='real' name='[OLat]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
            </column>
            <column aggregation='Avg' datatype='real' name='[OLong]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
            </column>
            <column-instance column='[OLat]' derivation='None' name='[none:OLat:qk]' pivot='key' type='quantitative' />
            <column-instance column='[OLong]' derivation='None' name='[none:OLong:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[none:OLong:qk]' field-type='quantitative' max='34007519.899238408' min='20016486.241919756' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[none:OLat:qk]' field-type='quantitative' max='12178612.901145922' min='1285826.790319737' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' palette='tableau-red-green' reverse='true' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='um_light_countries' value='true' />
            <format attr='enabled' id='um_light_states' value='true' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='false' />
            <format attr='enabled' id='pp2_statelabels' value='false' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[csv.41677.501581817130].[none:OLat:qk]</rows>
        <cols>[csv.41677.501581817130].[none:OLong:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Geo Map  w.o. Null'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Where are delays the worst?&#10;</run>
            <run fontcolor='#f1923e' fontsize='11' italic='true'>Hover over a city to see it&apos;s rank comparative to other airports in its region and whether its in the worst 5 or best 5 cities.</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Online' />
          </mapsources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='(GLM) Variable Coefficient Signage' datatype='integer' name='[03 Grab Coefficient Variables (copy)]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SIGN([Calculation_7320206215923342])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='(GLM) Variable Coefficients' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column aggregation='Avg' datatype='real' name='[OLat]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
            </column>
            <column aggregation='Avg' datatype='real' name='[OLong]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
            </column>
            <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[OLat]' derivation='None' name='[none:OLat:qk]' pivot='key' type='quantitative' />
            <column-instance column='[OLong]' derivation='None' name='[none:OLong:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
            <column-instance column='[03 Grab Coefficient Variables (copy)]' derivation='User' name='[usr:03 Grab Coefficient Variables (copy):ok]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[csv.41677.501581817130].[Calculation_7320206215923342]' ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[none:OCity:nk]'>
            <groupfilter function='level-members' level='[none:OCity:nk]' />
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[none:Origin:nk]'>
            <groupfilter function='level-members' level='[none:Origin:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[usr:03 Grab Coefficient Variables (copy):ok]' member='-1' />
              <groupfilter function='member' level='[usr:03 Grab Coefficient Variables (copy):ok]' member='1' />
            </groupfilter>
          </filter>
          <slices>
            <column>[csv.41677.501581817130].[none:Origin:nk]</column>
            <column>[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]</column>
            <column>[csv.41677.501581817130].[Action (OCity,Origin)]</column>
            <column>[csv.41677.501581817130].[none:OCity:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[none:OLong:qk]' field-type='quantitative' max='34126850.334283739' min='20363084.785862178' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[none:OLat:qk]' field-type='quantitative' max='8190544.1534709409' min='1352495.2863562535' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[csv.41677.501581817130].[none:OLong:qk]' value='false' />
            <format attr='in-tooltip' field='[csv.41677.501581817130].[none:OLat:qk]' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='um_light_countries' value='true' />
            <format attr='enabled' id='um_light_states' value='true' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='false' />
            <format attr='enabled' id='pp2_statelabels' value='false' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <size column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' />
              <color column='[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]' />
              <lod column='[csv.41677.501581817130].[none:Origin:nk]' />
              <lod column='[csv.41677.501581817130].[none:OCity:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.2853591442108154' />
                <format attr='shape' value=':filled/plus' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[csv.41677.501581817130].[none:OLat:qk]</rows>
        <cols>[csv.41677.501581817130].[none:OLong:qk]</cols>
      </table>
    </worksheet>
    <worksheet lock-quick-filters='true' name='Heat Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Which airports in your city should you take?&#10;</run>
            <run fontcolor='#f1923e' italic='true'>Same city comparison of airports as well as region wide comparison of flight cancelllations with highly affected cities on the forefront.</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='(GLM) Variable Coefficients' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Field'>
                <order field='[csv.41677.501581817130].[none:OCity:nk]' />
                <order field='[csv.41677.501581817130].[none:Origin:nk]' />
              </table-calc>
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='752' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' palette='area-red-green' reverse='true' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' value='false' />
            <format attr='break-on-special' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' value='false' />
            <format attr='show-null-value-warning' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' value='false' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' value='(GLM) Coefficient Variables'>
              <formatted-text>
                <run>(GLM) Coefficient Variables</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' />
              <color column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' />
              <text column='[csv.41677.501581817130].[none:OCity:nk]' />
              <text column='[csv.41677.501581817130].[none:Origin:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet name='Parameters Control'>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
          </datasources>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='parameter-ctrl'>
            <format attr='border-width' value='2' />
            <format attr='border-style' value='solid' />
          </style-rule>
          <style-rule element='parameter-ctrl-title'>
            <format attr='text-align' value='right' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet lock-quick-filters='true' name='Regional Distribution'>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='(GLM) Variable Coefficients' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Regional Groups]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <calculation class='categorical-bin' column='[OCity]' default='&quot;Yuma&quot;'>
                <bin value='&quot;Albany&quot;'>
                  <value>&quot;Albany&quot;</value>
                  <value>&quot;Charlotte&quot;</value>
                  <value>&quot;Greensboro&quot;</value>
                  <value>&quot;Raleigh-durham&quot;</value>
                  <value>&quot;Richmond&quot;</value>
                  <value>&quot;Roanoke VA&quot;</value>
                  <value>&quot;Washington&quot;</value>
                </bin>
                <bin value='&quot;Aspen&quot;'>
                  <value>&quot;Aspen&quot;</value>
                  <value>&quot;Boise&quot;</value>
                  <value>&quot;Colorado Springs&quot;</value>
                  <value>&quot;Denver&quot;</value>
                  <value>&quot;Fresno&quot;</value>
                  <value>&quot;Hailey&quot;</value>
                  <value>&quot;Long Beach&quot;</value>
                  <value>&quot;Los Angeles&quot;</value>
                  <value>&quot;Oakland&quot;</value>
                  <value>&quot;Ontario&quot;</value>
                  <value>&quot;Palm Springs&quot;</value>
                  <value>&quot;Reno&quot;</value>
                  <value>&quot;San Diego&quot;</value>
                  <value>&quot;San Francisco&quot;</value>
                  <value>&quot;San Jose&quot;</value>
                </bin>
                <bin value='&quot;Austin&quot;'>
                  <value>&quot;Austin&quot;</value>
                  <value>&quot;Birmingham&quot;</value>
                  <value>&quot;Columbus&quot;</value>
                  <value>&quot;Dallas-Fort Worth&quot;</value>
                  <value>&quot;Greenville&quot;</value>
                  <value>&quot;Houston&quot;</value>
                  <value>&quot;Little Rock&quot;</value>
                  <value>&quot;Lubbock&quot;</value>
                  <value>&quot;Memphis&quot;</value>
                  <value>&quot;Miami&quot;</value>
                  <value>&quot;Midland&quot;</value>
                  <value>&quot;New Orleans&quot;</value>
                  <value>&quot;Oklahoma City&quot;</value>
                  <value>&quot;Sarasota&quot;</value>
                  <value>&quot;Tulsa&quot;</value>
                </bin>
                <bin value='&quot;Cedar Rapids&quot;'>
                  <value>&quot;Cedar Rapids&quot;</value>
                  <value>&quot;Chicago&quot;</value>
                  <value>&quot;Cincinnati&quot;</value>
                  <value>&quot;Cleveland&quot;</value>
                  <value>&quot;Detroit&quot;</value>
                  <value>&quot;Indianapolis&quot;</value>
                  <value>&quot;Kalamazoo&quot;</value>
                  <value>&quot;Kansas City&quot;</value>
                  <value>&quot;Louisville&quot;</value>
                  <value>&quot;Milwaukee&quot;</value>
                  <value>&quot;Minneapolis&quot;</value>
                  <value>&quot;Omaha&quot;</value>
                  <value>&quot;Pittsburgh&quot;</value>
                  <value>&quot;Portland&quot;</value>
                  <value>&quot;Rochester&quot;</value>
                  <value>&quot;St. Louis&quot;</value>
                </bin>
                <bin value='&quot;Islip&quot;'>
                  <value>&quot;Islip&quot;</value>
                  <value>&quot;New York&quot;</value>
                  <value>&quot;Newark&quot;</value>
                  <value>&quot;Philadelphia&quot;</value>
                  <value>&quot;Worcester&quot;</value>
                </bin>
              </calculation>
              <aliases>
                <alias key='&quot;Albany&quot;' value='Mid-Atlantic' />
                <alias key='&quot;Aspen&quot;' value='West' />
                <alias key='&quot;Austin&quot;' value='South' />
                <alias key='&quot;Cedar Rapids&quot;' value='Midwest' />
                <alias key='&quot;Islip&quot;' value='Northeast' />
                <alias key='&quot;Yuma&quot;' value='Other' />
              </aliases>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:qk:5]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[csv.41677.501581817130].[Regional Groups]' ordering-type='Field' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[none:OLat:qk]' />
              <groupfilter function='level-members' level='[none:OLong:qk]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]</column>
            <column>[csv.41677.501581817130].[Action (OCity,Origin)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[csv.41677.501581817130].[Regional Groups]' value='95' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <lod column='[csv.41677.501581817130].[none:OCity:nk]' />
            </encodings>
            <reference-line axis-column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:5]' boxplot-mark-exclusion='false' boxplot-whisker-type='standard' formula='average' id='refline0' label-type='automatic' scope='per-cell' symmetric='false' value-column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:5]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25' />
                <format attr='shape' value=':filled/plus' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:5]</rows>
        <cols>[csv.41677.501581817130].[Regional Groups]</cols>
      </table>
    </worksheet>
    <worksheet lock-quick-filters='true' name='Table Chart'>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='Option : Null' datatype='real' name='[Calculation_0840422201739178]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IIF([Calculation_7320206215923342]==0,Null,[Calculation_7320206215923342])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='(GLM) Variable Coefficients' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_0840422201739178]' derivation='User' name='[usr:Calculation_0840422201739178:ok]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[csv.41677.501581817130].[Calculation_7320206215923342]' ordering-type='Field'>
                <order field='[csv.41677.501581817130].[none:OCity:nk]' />
                <order field='[csv.41677.501581817130].[none:Origin:nk]' />
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:ok:1]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Field'>
                <order field='[csv.41677.501581817130].[none:OCity:nk]' />
                <order field='[csv.41677.501581817130].[none:Origin:nk]' />
              </table-calc>
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[usr:Calculation_0840422201739178:ok]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[usr:Calculation_0840422201739178:ok]' />
              <groupfilter function='member' level='[usr:Calculation_0840422201739178:ok]' member='%null%' />
            </groupfilter>
          </filter>
          <sort class='alphabetic' column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:ok:1]' direction='DESC' />
          <slices>
            <column>[csv.41677.501581817130].[usr:Calculation_0840422201739178:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[csv.41677.501581817130].[usr:Calculation_0840422201739178:ok]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([csv.41677.501581817130].[none:Origin:nk] / ([csv.41677.501581817130].[none:OCity:nk] / [csv.41677.501581817130].[usr:Calculation_7320206215923342:ok:1]))</rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet name='Variable Importance'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Variable Importance of Origin Points&#10;</run>
            <run fontcolor='#f1923e' italic='true'>Move index sliders to view the top 10 or bottom 10 airports for cancellations.</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='(GLM) Variable Coefficient Signage' datatype='integer' name='[03 Grab Coefficient Variables (copy)]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SIGN([Calculation_7320206215923342])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Index' datatype='integer' name='[Calculation_0230903195627598]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='Index()' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='(GLM) Variable Coefficients' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
            <column-instance column='[03 Grab Coefficient Variables (copy)]' derivation='User' name='[usr:03 Grab Coefficient Variables (copy):ok]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[csv.41677.501581817130].[Calculation_7320206215923342]' ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_0230903195627598]' derivation='User' name='[usr:Calculation_0230903195627598:qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[none:OLat:qk]' />
              <groupfilter function='level-members' level='[none:OLong:qk]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[none:OCity:nk]'>
            <groupfilter function='level-members' level='[none:OCity:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <sort class='manual' column='[csv.41677.501581817130].[none:Origin:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;HPN&quot;</bucket>
              <bucket>&quot;BOS&quot;</bucket>
              <bucket>&quot;DAL&quot;</bucket>
              <bucket>&quot;DCA&quot;</bucket>
              <bucket>&quot;ORD&quot;</bucket>
              <bucket>&quot;LGA&quot;</bucket>
              <bucket>&quot;EWR&quot;</bucket>
              <bucket>&quot;PHL&quot;</bucket>
              <bucket>&quot;DUT&quot;</bucket>
              <bucket>&quot;ASE&quot;</bucket>
              <bucket>&quot;SUN&quot;</bucket>
              <bucket>&quot;HOU&quot;</bucket>
              <bucket>&quot;JFK&quot;</bucket>
              <bucket>&quot;AZO&quot;</bucket>
              <bucket>&quot;CID&quot;</bucket>
              <bucket>&quot;DTW&quot;</bucket>
              <bucket>&quot;SFO&quot;</bucket>
              <bucket>&quot;MDW&quot;</bucket>
              <bucket>&quot;ANC&quot;</bucket>
              <bucket>&quot;PWM&quot;</bucket>
              <bucket>&quot;ISP&quot;</bucket>
              <bucket>&quot;RST&quot;</bucket>
              <bucket>&quot;MSP&quot;</bucket>
              <bucket>&quot;IAD&quot;</bucket>
              <bucket>&quot;STL&quot;</bucket>
              <bucket>&quot;ROC&quot;</bucket>
              <bucket>&quot;MKE&quot;</bucket>
              <bucket>&quot;LAN&quot;</bucket>
              <bucket>&quot;DFW&quot;</bucket>
              <bucket>&quot;COS&quot;</bucket>
              <bucket>&quot;ORH&quot;</bucket>
              <bucket>&quot;GSO&quot;</bucket>
              <bucket>&quot;GSP&quot;</bucket>
              <bucket>&quot;ICT&quot;</bucket>
              <bucket>&quot;ROA&quot;</bucket>
              <bucket>&quot;RIC&quot;</bucket>
              <bucket>&quot;LAX&quot;</bucket>
              <bucket>&quot;PNS&quot;</bucket>
              <bucket>&quot;SBN&quot;</bucket>
              <bucket>&quot;TYS&quot;</bucket>
              <bucket>&quot;OAK&quot;</bucket>
              <bucket>&quot;ORF&quot;</bucket>
              <bucket>&quot;MAF&quot;</bucket>
              <bucket>&quot;CVG&quot;</bucket>
              <bucket>&quot;ONT&quot;</bucket>
              <bucket>&quot;LBB&quot;</bucket>
              <bucket>&quot;MEM&quot;</bucket>
              <bucket>&quot;CLE&quot;</bucket>
              <bucket>&quot;LIT&quot;</bucket>
              <bucket>&quot;BHM&quot;</bucket>
              <bucket>&quot;SDF&quot;</bucket>
              <bucket>&quot;SJC&quot;</bucket>
              <bucket>&quot;TUL&quot;</bucket>
              <bucket>&quot;DEN&quot;</bucket>
              <bucket>&quot;RDU&quot;</bucket>
              <bucket>&quot;CLT&quot;</bucket>
              <bucket>&quot;MSY&quot;</bucket>
              <bucket>&quot;FAT&quot;</bucket>
              <bucket>&quot;SRQ&quot;</bucket>
              <bucket>&quot;PSP&quot;</bucket>
              <bucket>&quot;MCI&quot;</bucket>
              <bucket>&quot;OKC&quot;</bucket>
              <bucket>&quot;SAN&quot;</bucket>
              <bucket>&quot;IAH&quot;</bucket>
              <bucket>&quot;RNO&quot;</bucket>
              <bucket>&quot;AUS&quot;</bucket>
              <bucket>&quot;IND&quot;</bucket>
              <bucket>&quot;SAT&quot;</bucket>
              <bucket>&quot;SJU&quot;</bucket>
              <bucket>&quot;LGB&quot;</bucket>
              <bucket>&quot;SMF&quot;</bucket>
              <bucket>&quot;MIA&quot;</bucket>
              <bucket>&quot;JAX&quot;</bucket>
              <bucket>&quot;ELP&quot;</bucket>
              <bucket>&quot;PDX&quot;</bucket>
              <bucket>&quot;OMA&quot;</bucket>
              <bucket>&quot;TUS&quot;</bucket>
              <bucket>&quot;PHX&quot;</bucket>
              <bucket>&quot;SEA&quot;</bucket>
              <bucket>&quot;BOI&quot;</bucket>
              <bucket>&quot;SLC&quot;</bucket>
              <bucket>&quot;BNA&quot;</bucket>
              <bucket>&quot;FLL&quot;</bucket>
              <bucket>&quot;RSW&quot;</bucket>
              <bucket>&quot;TPA&quot;</bucket>
              <bucket>&quot;ABQ&quot;</bucket>
              <bucket>&quot;MCO&quot;</bucket>
              <bucket>&quot;PBI&quot;</bucket>
              <bucket>&quot;LAS&quot;</bucket>
              <bucket>&quot;HNL&quot;</bucket>
              <bucket>%all%</bucket>
              <bucket>%null%</bucket>
              <bucket>&quot;ABE&quot;</bucket>
              <bucket>&quot;CYS&quot;</bucket>
              <bucket>&quot;FMN&quot;</bucket>
              <bucket>&quot;ABI&quot;</bucket>
              <bucket>&quot;ABY&quot;</bucket>
              <bucket>&quot;ACK&quot;</bucket>
              <bucket>&quot;ACT&quot;</bucket>
              <bucket>&quot;ACV&quot;</bucket>
              <bucket>&quot;ACY&quot;</bucket>
              <bucket>&quot;ADK&quot;</bucket>
              <bucket>&quot;ADQ&quot;</bucket>
              <bucket>&quot;AEX&quot;</bucket>
              <bucket>&quot;AGS&quot;</bucket>
              <bucket>&quot;AKN&quot;</bucket>
              <bucket>&quot;ALB&quot;</bucket>
              <bucket>&quot;ALO&quot;</bucket>
              <bucket>&quot;AMA&quot;</bucket>
              <bucket>&quot;ANI&quot;</bucket>
              <bucket>&quot;APF&quot;</bucket>
              <bucket>&quot;ATL&quot;</bucket>
              <bucket>&quot;ATW&quot;</bucket>
              <bucket>&quot;AVL&quot;</bucket>
              <bucket>&quot;AVP&quot;</bucket>
              <bucket>&quot;BDL&quot;</bucket>
              <bucket>&quot;BET&quot;</bucket>
              <bucket>&quot;BFF&quot;</bucket>
              <bucket>&quot;BFI&quot;</bucket>
              <bucket>&quot;BFL&quot;</bucket>
              <bucket>&quot;BGM&quot;</bucket>
              <bucket>&quot;BGR&quot;</bucket>
              <bucket>&quot;BIL&quot;</bucket>
              <bucket>&quot;BIS&quot;</bucket>
              <bucket>&quot;BJI&quot;</bucket>
              <bucket>&quot;BLI&quot;</bucket>
              <bucket>&quot;BMI&quot;</bucket>
              <bucket>&quot;BPT&quot;</bucket>
              <bucket>&quot;BQK&quot;</bucket>
              <bucket>&quot;BQN&quot;</bucket>
              <bucket>&quot;BRO&quot;</bucket>
              <bucket>&quot;BRW&quot;</bucket>
              <bucket>&quot;BTM&quot;</bucket>
              <bucket>&quot;BTR&quot;</bucket>
              <bucket>&quot;BTV&quot;</bucket>
              <bucket>&quot;BUF&quot;</bucket>
              <bucket>&quot;BUR&quot;</bucket>
              <bucket>&quot;BWI&quot;</bucket>
              <bucket>&quot;BZN&quot;</bucket>
              <bucket>&quot;CAE&quot;</bucket>
              <bucket>&quot;CAK&quot;</bucket>
              <bucket>&quot;CCR&quot;</bucket>
              <bucket>&quot;CDC&quot;</bucket>
              <bucket>&quot;CDV&quot;</bucket>
              <bucket>&quot;CEC&quot;</bucket>
              <bucket>&quot;CHA&quot;</bucket>
              <bucket>&quot;CHO&quot;</bucket>
              <bucket>&quot;CHS&quot;</bucket>
              <bucket>&quot;CIC&quot;</bucket>
              <bucket>&quot;CKB&quot;</bucket>
              <bucket>&quot;CLD&quot;</bucket>
              <bucket>&quot;CLL&quot;</bucket>
              <bucket>&quot;CMH&quot;</bucket>
              <bucket>&quot;CMI&quot;</bucket>
              <bucket>&quot;CMX&quot;</bucket>
              <bucket>&quot;COD&quot;</bucket>
              <bucket>&quot;CPR&quot;</bucket>
              <bucket>&quot;CRP&quot;</bucket>
              <bucket>&quot;CRW&quot;</bucket>
              <bucket>&quot;CSG&quot;</bucket>
              <bucket>&quot;CWA&quot;</bucket>
              <bucket>&quot;DAB&quot;</bucket>
              <bucket>&quot;DAY&quot;</bucket>
              <bucket>&quot;DBQ&quot;</bucket>
              <bucket>&quot;DET&quot;</bucket>
              <bucket>&quot;DHN&quot;</bucket>
              <bucket>&quot;DLG&quot;</bucket>
              <bucket>&quot;DLH&quot;</bucket>
              <bucket>&quot;DRO&quot;</bucket>
              <bucket>&quot;DSM&quot;</bucket>
              <bucket>&quot;EAU&quot;</bucket>
              <bucket>&quot;EFD&quot;</bucket>
              <bucket>&quot;EGE&quot;</bucket>
              <bucket>&quot;EKO&quot;</bucket>
              <bucket>&quot;ELM&quot;</bucket>
              <bucket>&quot;ERI&quot;</bucket>
              <bucket>&quot;EUG&quot;</bucket>
              <bucket>&quot;EVV&quot;</bucket>
              <bucket>&quot;EWN&quot;</bucket>
              <bucket>&quot;EYW&quot;</bucket>
              <bucket>&quot;FAI&quot;</bucket>
              <bucket>&quot;FAR&quot;</bucket>
              <bucket>&quot;FAY&quot;</bucket>
              <bucket>&quot;FCA&quot;</bucket>
              <bucket>&quot;FLG&quot;</bucket>
              <bucket>&quot;FLO&quot;</bucket>
              <bucket>&quot;FNT&quot;</bucket>
              <bucket>&quot;FSD&quot;</bucket>
              <bucket>&quot;FSM&quot;</bucket>
              <bucket>&quot;FWA&quot;</bucket>
              <bucket>&quot;GCC&quot;</bucket>
              <bucket>&quot;GCN&quot;</bucket>
              <bucket>&quot;GEG&quot;</bucket>
              <bucket>&quot;GFK&quot;</bucket>
              <bucket>&quot;GGG&quot;</bucket>
              <bucket>&quot;GJT&quot;</bucket>
              <bucket>&quot;GLH&quot;</bucket>
              <bucket>&quot;MKC&quot;</bucket>
              <bucket>&quot;PIR&quot;</bucket>
              <bucket>&quot;KSM&quot;</bucket>
              <bucket>&quot;KTN&quot;</bucket>
              <bucket>&quot;LAW&quot;</bucket>
              <bucket>&quot;LCH&quot;</bucket>
              <bucket>&quot;LEX&quot;</bucket>
              <bucket>&quot;LFT&quot;</bucket>
              <bucket>&quot;LIH&quot;</bucket>
              <bucket>&quot;LMT&quot;</bucket>
              <bucket>&quot;LNK&quot;</bucket>
              <bucket>&quot;LNY&quot;</bucket>
              <bucket>&quot;LRD&quot;</bucket>
              <bucket>&quot;LSE&quot;</bucket>
              <bucket>&quot;LWB&quot;</bucket>
              <bucket>&quot;LWS&quot;</bucket>
              <bucket>&quot;LYH&quot;</bucket>
              <bucket>&quot;MAZ&quot;</bucket>
              <bucket>&quot;MBS&quot;</bucket>
              <bucket>&quot;MCN&quot;</bucket>
              <bucket>&quot;MDT&quot;</bucket>
              <bucket>&quot;MEI&quot;</bucket>
              <bucket>&quot;MFE&quot;</bucket>
              <bucket>&quot;MFR&quot;</bucket>
              <bucket>&quot;MGM&quot;</bucket>
              <bucket>&quot;MHT&quot;</bucket>
              <bucket>&quot;MIB&quot;</bucket>
              <bucket>&quot;MKG&quot;</bucket>
              <bucket>&quot;MKK&quot;</bucket>
              <bucket>&quot;MLB&quot;</bucket>
              <bucket>&quot;MLI&quot;</bucket>
              <bucket>&quot;MLU&quot;</bucket>
              <bucket>&quot;MOB&quot;</bucket>
              <bucket>&quot;MOD&quot;</bucket>
              <bucket>&quot;MOT&quot;</bucket>
              <bucket>&quot;MQT&quot;</bucket>
              <bucket>&quot;MRY&quot;</bucket>
              <bucket>&quot;MSN&quot;</bucket>
              <bucket>&quot;MSO&quot;</bucket>
              <bucket>&quot;MTH&quot;</bucket>
              <bucket>&quot;MTJ&quot;</bucket>
              <bucket>&quot;MYR&quot;</bucket>
              <bucket>&quot;OAJ&quot;</bucket>
              <bucket>&quot;OGD&quot;</bucket>
              <bucket>&quot;GNV&quot;</bucket>
              <bucket>&quot;GPT&quot;</bucket>
              <bucket>&quot;GRB&quot;</bucket>
              <bucket>&quot;GRK&quot;</bucket>
              <bucket>&quot;GRR&quot;</bucket>
              <bucket>&quot;GST&quot;</bucket>
              <bucket>&quot;GTF&quot;</bucket>
              <bucket>&quot;GTR&quot;</bucket>
              <bucket>&quot;GUC&quot;</bucket>
              <bucket>&quot;GUM&quot;</bucket>
              <bucket>&quot;HDN&quot;</bucket>
              <bucket>&quot;HHH&quot;</bucket>
              <bucket>&quot;HKY&quot;</bucket>
              <bucket>&quot;HLN&quot;</bucket>
              <bucket>&quot;HRL&quot;</bucket>
              <bucket>&quot;HSV&quot;</bucket>
              <bucket>&quot;HTS&quot;</bucket>
              <bucket>&quot;HVN&quot;</bucket>
              <bucket>&quot;IDA&quot;</bucket>
              <bucket>&quot;ILE&quot;</bucket>
              <bucket>&quot;ILG&quot;</bucket>
              <bucket>&quot;ILM&quot;</bucket>
              <bucket>&quot;INL&quot;</bucket>
              <bucket>&quot;IPL&quot;</bucket>
              <bucket>&quot;ISO&quot;</bucket>
              <bucket>&quot;ITH&quot;</bucket>
              <bucket>&quot;ITO&quot;</bucket>
              <bucket>&quot;IYK&quot;</bucket>
              <bucket>&quot;JAC&quot;</bucket>
              <bucket>&quot;JAN&quot;</bucket>
              <bucket>&quot;JNU&quot;</bucket>
              <bucket>&quot;KOA&quot;</bucket>
              <bucket>&quot;OGG&quot;</bucket>
              <bucket>&quot;OME&quot;</bucket>
              <bucket>&quot;OTH&quot;</bucket>
              <bucket>&quot;OTZ&quot;</bucket>
              <bucket>&quot;OXR&quot;</bucket>
              <bucket>&quot;PFN&quot;</bucket>
              <bucket>&quot;PHF&quot;</bucket>
              <bucket>&quot;PIA&quot;</bucket>
              <bucket>&quot;PIE&quot;</bucket>
              <bucket>&quot;PIH&quot;</bucket>
              <bucket>&quot;PIT&quot;</bucket>
              <bucket>&quot;PLN&quot;</bucket>
              <bucket>&quot;PMD&quot;</bucket>
              <bucket>&quot;PSC&quot;</bucket>
              <bucket>&quot;PSE&quot;</bucket>
              <bucket>&quot;PSG&quot;</bucket>
              <bucket>&quot;PUB&quot;</bucket>
              <bucket>&quot;PVD&quot;</bucket>
              <bucket>&quot;PVU&quot;</bucket>
              <bucket>&quot;RAP&quot;</bucket>
              <bucket>&quot;RDD&quot;</bucket>
              <bucket>&quot;RDM&quot;</bucket>
              <bucket>&quot;RDR&quot;</bucket>
              <bucket>&quot;RFD&quot;</bucket>
              <bucket>&quot;RHI&quot;</bucket>
              <bucket>&quot;RKS&quot;</bucket>
              <bucket>&quot;ROP&quot;</bucket>
              <bucket>&quot;ROR&quot;</bucket>
              <bucket>&quot;ROW&quot;</bucket>
              <bucket>&quot;SAV&quot;</bucket>
              <bucket>&quot;SBA&quot;</bucket>
              <bucket>&quot;SBP&quot;</bucket>
              <bucket>&quot;SCC&quot;</bucket>
              <bucket>&quot;SCE&quot;</bucket>
              <bucket>&quot;SCK&quot;</bucket>
              <bucket>&quot;SGF&quot;</bucket>
              <bucket>&quot;SGU&quot;</bucket>
              <bucket>&quot;SHV&quot;</bucket>
              <bucket>&quot;SIT&quot;</bucket>
              <bucket>&quot;SJT&quot;</bucket>
              <bucket>&quot;SLE&quot;</bucket>
              <bucket>&quot;SMX&quot;</bucket>
              <bucket>&quot;SNA&quot;</bucket>
              <bucket>&quot;SOP&quot;</bucket>
              <bucket>&quot;SPI&quot;</bucket>
              <bucket>&quot;SPN&quot;</bucket>
              <bucket>&quot;SPS&quot;</bucket>
              <bucket>&quot;STT&quot;</bucket>
              <bucket>&quot;STX&quot;</bucket>
              <bucket>&quot;SUX&quot;</bucket>
              <bucket>&quot;SWF&quot;</bucket>
              <bucket>&quot;SYR&quot;</bucket>
              <bucket>&quot;TEX&quot;</bucket>
              <bucket>&quot;TLH&quot;</bucket>
              <bucket>&quot;TOL&quot;</bucket>
              <bucket>&quot;TRI&quot;</bucket>
              <bucket>&quot;TTN&quot;</bucket>
              <bucket>&quot;TUP&quot;</bucket>
              <bucket>&quot;TVC&quot;</bucket>
              <bucket>&quot;TVL&quot;</bucket>
              <bucket>&quot;TWF&quot;</bucket>
              <bucket>&quot;TXK&quot;</bucket>
              <bucket>&quot;TYR&quot;</bucket>
              <bucket>&quot;UCA&quot;</bucket>
              <bucket>&quot;VCT&quot;</bucket>
              <bucket>&quot;VIS&quot;</bucket>
              <bucket>&quot;VLD&quot;</bucket>
              <bucket>&quot;VPS&quot;</bucket>
              <bucket>&quot;WRG&quot;</bucket>
              <bucket>&quot;WYS&quot;</bucket>
              <bucket>&quot;XNA&quot;</bucket>
              <bucket>&quot;YAK&quot;</bucket>
              <bucket>&quot;YAP&quot;</bucket>
              <bucket>&quot;YKM&quot;</bucket>
              <bucket>&quot;YUM&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[usr:03 Grab Coefficient Variables (copy):ok]' member='-1' />
              <groupfilter function='member' level='[usr:03 Grab Coefficient Variables (copy):ok]' member='1' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' included-values='in-range'>
            <min>1</min>
            <max>10</max>
          </filter>
          <filter class='quantitative' column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' included-values='non-null'>
          </filter>
          <slices>
            <column>[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]</column>
            <column>[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]</column>
            <column>[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]</column>
            <column>[csv.41677.501581817130].[none:OCity:nk]</column>
            <column>[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[csv.41677.501581817130].[none:OCity:nk]' value='false' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' value='false' />
            <format attr='break-on-special' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' value='false' />
            <format attr='show-null-value-warning' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' value='Index of Top 10 or Bottom 10 Airports'>
              <formatted-text>
                <run>Index of Top 10 or Bottom 10 Airports</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]</rows>
        <cols>([csv.41677.501581817130].[none:Origin:nk] / [csv.41677.501581817130].[none:OCity:nk])</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Flight Cancellation Dashboard'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Flight Cancellation Based on Departure Point</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
        <style-rule element='table'>
          <format attr='background-color' value='#ffffff' />
        </style-rule>
      </style>
      <size maxheight='900' maxwidth='1700' minheight='900' minwidth='1700' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='27' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='4443' id='26' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='95557' id='22' param='horz' type='layout-flow' w='100000' x='0' y='4443'>
              <zone h='95557' id='20' param='horz' type='layout-flow' w='90588' x='0' y='4443'>
                <zone h='95557' id='18' type='layout-basic' w='90588' x='0' y='4443'>
                  <zone h='47780' id='13' param='horz' type='layout-flow' w='90588' x='0' y='4443'>
                    <zone h='47780' id='11' param='horz' type='layout-flow' w='90588' x='0' y='4443'>
                      <zone h='47780' id='9' type='layout-basic' w='90588' x='0' y='4443'>
                        <zone h='47780' id='5' param='horz' type='layout-flow' w='90588' x='0' y='4443'>
                          <zone fixed-size='561' h='47780' id='3' is-fixed='true' type='layout-basic' w='90588' x='0' y='4443'>
                            <zone h='47780' id='1' name='Geo Map  w.o. Null' show-title='true' w='45632' x='0' y='4443'>
                            </zone>
                            <zone h='47780' id='35' name='Heat Map' show-title='true' w='44956' x='45632' y='4443'>
                            </zone>
                          </zone>
                        </zone>
                      </zone>
                    </zone>
                  </zone>
                  <zone h='47777' id='37' name='Regional Distribution' show-title='true' w='28647' x='0' y='52223'>
                  </zone>
                  <zone h='47777' id='34' name='Flights By Airport' show-title='true' w='26176' x='64412' y='52223'>
                  </zone>
                  <zone h='47777' id='39' name='Variable Importance' show-title='true' w='35765' x='28647' y='52223'>
                  </zone>
                </zone>
              </zone>
              <zone fixed-size='160' h='95557' id='21' is-fixed='true' param='vert' type='layout-flow' w='9412' x='90588' y='4443'>
                <zone h='888' id='23' name='Geo Map  w.o. Null' param='[csv.41677.501581817130].[none:City:nk]' type='filter' w='9412' x='90588' y='4443'>
                </zone>
                <zone fixed-size='113' h='13444' id='31' is-fixed='true' name='AUC' show-title='true' w='9412' x='90588' y='5331'>
                  <layout-cache fixed-size-w='114' type-h='fixed' type-w='fixed' />
                </zone>
                <zone h='7221' id='28' name='Geo Map  w.o. Null' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:2]' type='filter' w='9412' x='90588' y='18775'>
                </zone>
                <zone h='6332' id='36' name='Heat Map' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' type='color' w='9412' x='90588' y='25996'>
                </zone>
                <zone h='7332' id='40' name='Variable Importance' param='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' type='filter' w='9412' x='90588' y='32328'>
                </zone>
                <zone h='60340' id='41' name='Geo Map  w.o. Null' param='[csv.41677.501581817130].[none:OCity:nk]' type='filter' w='9412' x='90588' y='39660'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='1' name='Parameters Control'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 10]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 11]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 14]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 13]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 12]' type='parameter' />
          </strip>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 6]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 5]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 15]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <floating-toolbar-visibility value='1' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[:Measure Names]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_0090526172605051:nk:2]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_0090526172605051:nk]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_5340526195241971:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Flights By Month'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[csv.41677.501581817130].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[:Measure Names]</field>
          <field>[csv.41677.501581817130].[none:Month:qk]</field>
          <field>[csv.41677.501581817130].[usr:02 Flight Count By Months (copy):qk:1]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_1340527151300682:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Flights By Airport'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[:Measure Names]</field>
          <field>[csv.41677.501581817130].[none:OCity:nk]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Variable Importance'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[none:OCity:nk]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Table Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[csv.41677.501581817130].[usr:Calculation_0840422201739178:ok]' show-domain='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[Parameters].[Parameter 1]</field>
          <field>[csv.41677.501581817130].[:Measure Names]</field>
          <field>[csv.41677.501581817130].[max:Origin:nk]</field>
          <field>[csv.41677.501581817130].[none:City:nk]</field>
          <field>[csv.41677.501581817130].[none:FlightNum:ok]</field>
          <field>[csv.41677.501581817130].[none:IsDepDelayed:nk]</field>
          <field>[csv.41677.501581817130].[none:Month:qk]</field>
          <field>[csv.41677.501581817130].[none:OCity:nk]</field>
          <field>[csv.41677.501581817130].[none:Origin (copy 2):nk]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Heat Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[none:OCity:nk]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Geo Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Geo Map  w.o. Null'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]' type='color' />
            <card pane-specification-id='2' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' type='size' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[none:City:nk]</field>
          <field>[csv.41677.501581817130].[none:OLat:qk]</field>
          <field>[csv.41677.501581817130].[none:OLong:qk]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
          <field>[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]</field>
          <field>[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):qk:1]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_0840422201739178:qk:2]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_7320206215923342:nk:2]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Regional Distribution'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[Regional Groups]</field>
          <field>[csv.41677.501581817130].[none:OCity:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Flight Cancellation Dashboard'>
      <active id='1' />
      <zones>
        <zone name='Regional Distribution'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Variable Importance'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Geo Map  w.o. Null' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:2]' show-null-ctrls='true' type='filter' />
        <zone name='Heat Map' pane-specification-id='0' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' type='color' />
        <zone name='Variable Importance' param='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
    <window class='hidden-worksheet' name='AUC'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='144' name='Parameters Control' width='174'>
      iVBORw0KGgoAAAANSUhEUgAAAK4AAACQCAIAAAAeHsdkAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAABQElEQVR4nO3SMQHAMAzAsKz8OWePObSHhMCHv90dmDm3A3iF
      FYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWI
      FYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWI
      FYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWI
      FYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWI
      FYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWIFYgViBWI
      FYgViBWIFYgViBWIFcgP9eEEHcxAtUgAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Flights By Month' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Flights By Airport' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Variable Importance' width='191'>
      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
      Cd/Vat5phQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Table Chart' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Heat Map' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Geo Map' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Geo Map  w.o. Null' width='192'>
      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
      4ALEcSf8P/mNh2QqQv/fAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Regional Distribution' width='191'>
      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
    </thumbnail>
    <thumbnail height='192' name='Flight Cancellation Dashboard' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
