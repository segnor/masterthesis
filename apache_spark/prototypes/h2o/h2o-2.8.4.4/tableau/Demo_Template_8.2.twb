<?xml version='1.0' encoding='utf-8' ?>

<workbook source-platform='win' version='8.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8200.14.0819.2015                                -->
  <preferences>
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.3'>
      <aliases enabled='yes' />
      <column caption='IP Address ' datatype='string' name='[Parameter 10]' param-domain-type='any' role='measure' type='nominal' value='&quot;localhost&quot;'>
        <calculation class='tableau' formula='&quot;localhost&quot;' />
        <desc>
          <formatted-text>
            <run>Input IP Address of server H2O is launched on</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Port' datatype='integer' name='[Parameter 11]' param-domain-type='any' role='measure' type='quantitative' value='54321'>
        <calculation class='tableau' formula='54321' />
      </column>
      <column caption='Path To Data' datatype='string' name='[Parameter 12]' param-domain-type='any' role='measure' type='nominal' value='&quot;https://github.com/0xdata/h2o/blob/master/smalldata/airlines/allyears2k_headers.zip?raw=true&quot;'>
        <calculation class='tableau' formula='&quot;https://github.com/0xdata/h2o/blob/master/smalldata/airlines/allyears2k_headers.zip?raw=true&quot;' />
      </column>
      <column caption='Beta' datatype='boolean' name='[Parameter 13]' param-domain-type='list' role='measure' type='nominal' value='true'>
        <calculation class='tableau' formula='true' />
        <members>
          <member value='true' />
          <member value='false' />
        </members>
      </column>
      <column caption='Local H2O Heap Size' datatype='string' name='[Parameter 14]' param-domain-type='any' role='measure' type='nominal' value='&quot;1g&quot;'>
        <calculation class='tableau' formula='&quot;1g&quot;' />
      </column>
      <column caption='(GLM) Lambda' datatype='string' name='[Parameter 15]' param-domain-type='any' role='measure' type='nominal' value='&quot;1.0E-5&quot;'>
        <calculation class='tableau' formula='&quot;1.0E-5&quot;' />
      </column>
      <column caption='(GLM) Response Variable' datatype='string' name='[Parameter 1]' param-domain-type='any' role='measure' type='nominal' value='&quot;Cancelled&quot;'>
        <calculation class='tableau' formula='&quot;Cancelled&quot;' />
      </column>
      <column caption='(GLM) Predictor Variables' datatype='string' name='[Parameter 2]' param-domain-type='any' role='measure' type='nominal' value='&quot;Origin,Dest,UniqueCarrier&quot;'>
        <calculation class='tableau' formula='&quot;Origin,Dest,UniqueCarrier&quot;' />
      </column>
      <column caption='(GLM) Alpha' datatype='real' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='1.0'>
        <calculation class='tableau' formula='1.0' />
        <range granularity='0.25' max='1.0' min='0.0' />
      </column>
      <column caption='(GLM) Cross Validation N-Folds' datatype='integer' name='[Parameter 4]' param-domain-type='range' role='measure' type='quantitative' value='0'>
        <calculation class='tableau' formula='0' />
        <range granularity='1' min='0' />
      </column>
      <column caption='(GLM) Family' datatype='string' name='[Parameter 5]' param-domain-type='list' role='measure' type='nominal' value='&quot;binomial&quot;'>
        <calculation class='tableau' formula='&quot;binomial&quot;' />
        <members>
          <member value='&quot;gaussian&quot;' />
          <member value='&quot;binomial&quot;' />
          <member value='&quot;poisson&quot;' />
          <member value='&quot;gamma&quot;' />
          <member value='&quot;tweedie&quot;' />
        </members>
      </column>
      <column caption='(GLM) Model Name' datatype='string' name='[Parameter 6]' param-domain-type='any' role='measure' type='nominal' value='&quot;data.glm&quot;'>
        <calculation class='tableau' formula='&quot;data.glm&quot;' />
      </column>
      <column caption='(K-Means) # of Centers' datatype='integer' name='[Parameter 7]' param-domain-type='range' role='measure' type='quantitative' value='2'>
        <calculation class='tableau' formula='2' />
        <range granularity='1' min='1' />
      </column>
      <column caption='(K-Means) Model Name' datatype='string' name='[Parameter 8]' param-domain-type='any' role='measure' type='nominal' value='&quot;data.km&quot;'>
        <calculation class='tableau' formula='&quot;data.km&quot;' />
      </column>
      <column caption='(K-means) Eval Cols' datatype='string' name='[Parameter 9]' param-domain-type='list' role='measure' type='nominal' value='&quot;AllAvailableColumns&quot;'>
        <calculation class='tableau' formula='&quot;AllAvailableColumns&quot;' />
        <members>
          <member value='&quot;AllAvailableColumns&quot;' />
          <member value='&quot;Year&quot;' />
          <member value='&quot;Month&quot;' />
          <member value='&quot;DayofMonth&quot;' />
          <member value='&quot;DayOfWeek&quot;' />
          <member value='&quot;DepTime&quot;' />
          <member value='&quot;CRSDepTime&quot;' />
          <member value='&quot;ArrTime&quot;' />
          <member value='&quot;CRSArrTime&quot;' />
          <member value='&quot;UniqueCarrier&quot;' />
          <member value='&quot;FlightNum&quot;' />
          <member value='&quot;TailNum&quot;' />
          <member value='&quot;ActualElapsedTime&quot;' />
          <member value='&quot;CRSElapsedTime&quot;' />
          <member value='&quot;AirTime&quot;' />
          <member value='&quot;ArrDelay&quot;' />
          <member value='&quot;DepDelay&quot;' />
          <member value='&quot;Origin&quot;' />
          <member value='&quot;Dest&quot;' />
          <member value='&quot;Distance&quot;' />
          <member value='&quot;TaxiIn&quot;' />
          <member value='&quot;TaxiOut&quot;' />
          <member value='&quot;Cancelled&quot;' />
          <member value='&quot;CancellationCode&quot;' />
          <member value='&quot;Diverted&quot;' />
          <member value='&quot;CarrierDelay&quot;' />
          <member value='&quot;WeatherDelay&quot;' />
          <member value='&quot;NASDelay&quot;' />
          <member value='&quot;SecurityDelay&quot;' />
          <member value='&quot;LateAircraftDelay&quot;' />
          <member value='&quot;IsArrDelayed&quot;' />
          <member value='&quot;IsDepDelayed&quot;' />
          <member value='&quot;City&quot;' />
        </members>
      </column>
      <folder name='GLM Parameters' role='parameters'>
        <folder-item name='[Parameter 15]' type='field' />
        <folder-item name='[Parameter 1]' type='field' />
        <folder-item name='[Parameter 2]' type='field' />
        <folder-item name='[Parameter 3]' type='field' />
        <folder-item name='[Parameter 4]' type='field' />
        <folder-item name='[Parameter 5]' type='field' />
        <folder-item name='[Parameter 6]' type='field' />
      </folder>
      <folder name='H2O Initialization' role='parameters'>
        <folder-item name='[Parameter 10]' type='field' />
        <folder-item name='[Parameter 11]' type='field' />
        <folder-item name='[Parameter 12]' type='field' />
        <folder-item name='[Parameter 13]' type='field' />
        <folder-item name='[Parameter 14]' type='field' />
      </folder>
      <folder name='K-Means Parameters' role='parameters'>
        <folder-item name='[Parameter 7]' type='field' />
        <folder-item name='[Parameter 8]' type='field' />
        <folder-item name='[Parameter 9]' type='field' />
      </folder>
    </datasource>
    <datasource caption='airlines_meta' inline='true' name='csv.41677.501581817130' version='8.3'>
      <connection auto-extract='yes' character-set='65001' class='csv' directory='C:\Users\Amy\Documents\h2o\Tableau\meta_data' driver='' filename='airlines_meta.csv' force-character-set='no' force-header='no' force-separator='no' header='yes' separator=','>
        <relation name='airlines_meta#csv' table='[airlines_meta#csv]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Colnames</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Colnames]</local-name>
            <parent-name>[airlines_meta#csv]</parent-name>
            <remote-alias>Colnames</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DCity</remote-name>
            <remote-type>130</remote-type>
            <local-name>[DCity]</local-name>
            <parent-name>[airlines_meta#csv]</parent-name>
            <remote-alias>DCity</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DLat</remote-name>
            <remote-type>5</remote-type>
            <local-name>[DLat]</local-name>
            <parent-name>[airlines_meta#csv]</parent-name>
            <remote-alias>DLat</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DLong</remote-name>
            <remote-type>5</remote-type>
            <local-name>[DLong]</local-name>
            <parent-name>[airlines_meta#csv]</parent-name>
            <remote-alias>DLong</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DayOfWeek</remote-name>
            <remote-type>3</remote-type>
            <local-name>[DayOfWeek]</local-name>
            <parent-name>[airlines_meta#csv]</parent-name>
            <remote-alias>DayOfWeek</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I4&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DayofMonth</remote-name>
            <remote-type>3</remote-type>
            <local-name>[DayofMonth]</local-name>
            <parent-name>[airlines_meta#csv]</parent-name>
            <remote-alias>DayofMonth</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I4&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Dest</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Dest]</local-name>
            <parent-name>[airlines_meta#csv]</parent-name>
            <remote-alias>Dest</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Month</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Month]</local-name>
            <parent-name>[airlines_meta#csv]</parent-name>
            <remote-alias>Month</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I4&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OCity</remote-name>
            <remote-type>130</remote-type>
            <local-name>[OCity]</local-name>
            <parent-name>[airlines_meta#csv]</parent-name>
            <remote-alias>OCity</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OLat</remote-name>
            <remote-type>5</remote-type>
            <local-name>[OLat]</local-name>
            <parent-name>[airlines_meta#csv]</parent-name>
            <remote-alias>OLat</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OLong</remote-name>
            <remote-type>5</remote-type>
            <local-name>[OLong]</local-name>
            <parent-name>[airlines_meta#csv]</parent-name>
            <remote-alias>OLong</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Origin</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Origin]</local-name>
            <parent-name>[airlines_meta#csv]</parent-name>
            <remote-alias>Origin</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>UniqueCarrier</remote-name>
            <remote-type>130</remote-type>
            <local-name>[UniqueCarrier]</local-name>
            <parent-name>[airlines_meta#csv]</parent-name>
            <remote-alias>UniqueCarrier</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[airlines_meta#csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I4&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Cancellation Count By Airport' datatype='integer' name='[02 Flight Count By Airport (copy)]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx4 = match( .arg1 , origin_canFlights.R$Origin ) &#13;&#10;print(origin_canFlights.R[idx4,]$C1)&#13;&#10;origin_canFlights.R[idx4,]$C1&#13;&#10;&quot;,&#13;&#10;ATTR([Origin]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Flight Count By Airport' datatype='integer' name='[02 Flight Count By Months (copy 2)]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx3 = match( .arg1 , originFlights.R$Origin ) &#13;&#10;print(originFlights.R[idx3,]$C1)&#13;&#10;originFlights.R[idx3,]$C1&#13;&#10;&quot;,&#13;&#10;ATTR([Origin])&#13;&#10;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Cancellation Count By Months' datatype='integer' name='[02 Flight Count By Months (copy)]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx2 = match( .arg1 , canFlights.R$Month ) &#13;&#10;print(canFlights.R[idx2,]$C1)&#13;&#10;if ( !is.na( .arg1 ) ) { canFlights.R[idx2,]$C1&#13;&#10;} else {&apos;Filter out Null values&apos;}&#13;&#10;&quot;,&#13;&#10;ATTR([Month])&#13;&#10;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Variable Coefficient Signage' datatype='integer' name='[03 Grab Coefficient Variables (copy)]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='SIGN([Calculation_7320206215923342])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Index' datatype='integer' name='[Calculation_0230903195627598]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='Index()' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='02 Execute Aggregation with H2O&apos;s ddply' datatype='string' name='[Calculation_0520904112538377]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_Str(&quot;&#13;&#10;## ddply, find the length of each month&#13;&#10;numFlights = h2o.ddply(data.hex, &apos;Month&apos;, nrow)&#13;&#10;numFlights.R = as.data.frame(numFlights)&#13;&#10;print(numFlights.R)&#13;&#10;&#13;&#10;## ddply, find the sum of cancellation column for each month&#13;&#10;fun2 = function(df) {sum(df$Cancelled)}&#13;&#10;h2o.addFunction(h2oLocal, fun2)&#13;&#10;canFlights = h2o.ddply(data.hex, &apos;Month&apos;, fun2)&#13;&#10;canFlights.R = as.data.frame(canFlights)&#13;&#10;print(canFlights.R)&#13;&#10;&#13;&#10;&apos;Finish Aggregations on Months&apos;&#13;&#10;&#13;&#10;## ddply, find the length of each airport group&#13;&#10;originFlights = h2o.ddply(data.hex, &apos;Origin&apos;, nrow)&#13;&#10;originFlights.R = as.data.frame(originFlights)&#13;&#10;print(canFlights.R)&#13;&#10;&#13;&#10;## ddply, find the sum of cancellation column in each airport group&#13;&#10;origin_canFlights = h2o.ddply(data.hex, &apos;Origin&apos;, fun2)&#13;&#10;origin_canFlights.R = as.data.frame(origin_canFlights)&#13;&#10;print(origin_canFlights.R)&#13;&#10;&apos;Finish Aggregations on Airports&apos;&#13;&#10;&#13;&#10;&quot;,&#13;&#10;&quot;&quot;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Option : Null' datatype='real' name='[Calculation_0840422201739178]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IIF([Calculation_7320206215923342]==0,Null,[Calculation_7320206215923342])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Flight Count By Months' datatype='integer' name='[Calculation_1340527151300682]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx = match( .arg1 , numFlights.R$Month ) &#13;&#10;print(numFlights.R[idx,]$C1)&#13;&#10;if ( !is.na( .arg1 ) ) { numFlights.R[idx,]$C1&#13;&#10;} else {&apos;Filter out Null values&apos;}&#13;&#10;&quot;,&#13;&#10;ATTR([Month])&#13;&#10;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='AUC Value' datatype='real' name='[Calculation_2510527224812934]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='script_real(&quot;&#13;&#10;data.glm@model$auc&#13;&#10;&quot;,&#13;&#10;INDEX() &#13;&#10;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='01 Start H2O &amp; Parse Data' datatype='string' name='[Calculation_2960206151848632]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot;&#13;&#10;## Load H2O&apos;s client package&#13;&#10;library(h2o)&#13;&#10;## Tableau High NA Count&#13;&#10;tableau.ignoreColumns &lt;- function (ignore_col , predictorVariable ) {&#13;&#10;if( predictorVariable %in% ignore_col ) { print( &apos;High NA Count&apos; )&#13;&#10;} else {print( &apos;Normal&apos; )}&#13;&#10;}&#13;&#10;&#13;&#10;## Tableau grab coefficients corresponding to predictor variable&#13;&#10;tableau_catFormat &lt;- function( modelKey , variableStr, predictorVariable) {&#13;&#10;if( typeof(modelKey) != &apos;S4&apos;) print(&apos;Model Key is not in expected format of S4&apos;)&#13;&#10;if( is.character(variableStr) != TRUE) print(&apos;Input column is not in expected format of string&apos;)&#13;&#10;if( is.character(predictorVariable) != TRUE) print(&apos;Input variables is not in expected format of string&apos;)&#13;&#10;glmModelTemp        = modelKey&#13;&#10;modelCoeff          = modelKey@model$coefficients&#13;&#10;modelCoeff          = modelKey@model$coefficients&#13;&#10;idx                 = grep( variableStr , names(modelCoeff))&#13;&#10;modelCoeff2        = modelCoeff[idx]&#13;&#10;variableNames       = unlist(strsplit(names(modelCoeff2),split=&apos;.&apos;,fixed=TRUE))&#13;&#10;variableNamesMatrix = matrix(variableNames, ncol=2, byrow=TRUE)&#13;&#10;variableList        = variableNamesMatrix[,2]&#13;&#10;names(modelCoeff2)  = variableList&#13;&#10;setDiff             = setdiff(.arg1,variableList)&#13;&#10;nullVec             = rep(0,length(setDiff))&#13;&#10;names(nullVec)      = setDiff&#13;&#10;newCoefficientList  = c(modelCoeff2, nullVec)&#13;&#10;tableau_input       = newCoefficientList[predictorVariable]&#13;&#10;tableau_input}&#13;&#10;&#13;&#10;print(&apos;Finish setting up Tableau functions&apos;)&#13;&#10;&#13;&#10;h2oLocal = h2o.init( ip = .arg1, port = .arg2, max_mem_size = .arg3, beta = .arg4)&#13;&#10;print(&apos;Finish starting H2O&apos;)&#13;&#10;data.hex = h2o.importFile(h2oLocal, path = .arg5)&#13;&#10;print(&apos;Finish Parsing data into H2O&apos;)&#13;&#10;&apos;Finish Parsing data into H2O&apos;&#13;&#10;&#13;&#10;&quot;,&#13;&#10;[Parameters].[Parameter 10],[Parameters].[Parameter 11],[Parameters].[Parameter 14],[Parameters].[Parameter 13],[Parameters].[Parameter 12])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Cancellation by Month' datatype='string' name='[Calculation_6260902222221692]' role='measure' type='nominal'>
        <calculation class='tableau' formula='Script_STR(&quot;&#13;&#10;## ddply, find the length of each month&#13;&#10;numFlights = h2o.ddply(data.hex, &apos;Month&apos;, nrow)&#13;&#10;numFlights.R = as.data.frame(numFlights)&#13;&#10;print(numFlights.R)&#13;&#10;&#13;&#10;## ddply, find the length of each month&#13;&#10;fun2 = function(df) {sum(df$Cancelled)}&#13;&#10;h2o.addFunction(h2oLocal, fun2)&#13;&#10;canFlights = h2o.ddply(data.hex, &apos;Month&apos;, fun2)&#13;&#10;canFlights.R = as.data.frame(canFlights)&#13;&#10;print(canFlights.R)&#13;&#10;&quot;,&#13;&#10;&quot;&quot;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Variable Coefficients' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='03 Run GLM' datatype='string' name='[Calculation_8800501133749493]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot; &#13;&#10;xvars = unlist( strsplit( .arg2, split = &apos;,&apos; , fixed = TRUE ) )&#13;&#10;print( &apos;break&apos;)&#13;&#10;print( xvars )&#13;&#10;print( .arg3 )&#13;&#10;print( data.hex )&#13;&#10;print( .arg4 )&#13;&#10;print( .arg5 )&#13;&#10;print( .arg6 )&#13;&#10;print( .arg7 )&#13;&#10;data.glm = h2o.glm(x = xvars , y = .arg3, data = data.hex, family = .arg4, nfolds = .arg5, standardize=TRUE)&#13;&#10;&#13;&#10;print(data.glm)&#13;&#10;&apos;Finish running GLM&apos;&#13;&#10;&quot;,&#13;&#10;[Parameters].[Parameter 6],[Parameters].[Parameter 2],[Parameters].[Parameter 1], [Parameters].[Parameter 5], [Parameters].[Parameter 4],[Parameters].[Parameter 3], [Parameters].[Parameter 15])' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Cancellations by Airport' datatype='string' name='[Cancellation by Month (copy)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot;&#13;&#10;## ddply, find the length of each month&#13;&#10;originFlights = h2o.ddply(data.hex, &apos;Origin&apos;, nrow)&#13;&#10;originFlights.R = as.data.frame(originFlights)&#13;&#10;print(canFlights.R)&#13;&#10;&#13;&#10;## ddply, find the length of each month&#13;&#10;origin_canFlights = h2o.ddply(data.hex, &apos;Origin&apos;, fun2)&#13;&#10;origin_canFlights.R = as.data.frame(origin_canFlights)&#13;&#10;print(origin_canFlights.R)&#13;&#10;&#13;&#10;&#13;&#10;&quot;,&#13;&#10;&quot;&quot;)' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column aggregation='Sum' datatype='integer' name='[DayOfWeek]' role='dimension' type='quantitative'>
      </column>
      <column aggregation='Sum' datatype='integer' name='[DayofMonth]' role='dimension' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Month]' role='dimension' type='quantitative'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column aggregation='Avg' datatype='real' name='[OLat]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column aggregation='Avg' datatype='real' name='[OLong]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' name='[Regional Groups]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <calculation class='categorical-bin' column='[OCity]' default='&quot;Yuma&quot;'>
          <bin value='&quot;Albany&quot;'>
            <value>&quot;Albany&quot;</value>
            <value>&quot;Charlotte&quot;</value>
            <value>&quot;Greensboro&quot;</value>
            <value>&quot;Raleigh-durham&quot;</value>
            <value>&quot;Richmond&quot;</value>
            <value>&quot;Roanoke VA&quot;</value>
            <value>&quot;Washington&quot;</value>
          </bin>
          <bin value='&quot;Aspen&quot;'>
            <value>&quot;Aspen&quot;</value>
            <value>&quot;Boise&quot;</value>
            <value>&quot;Colorado Springs&quot;</value>
            <value>&quot;Denver&quot;</value>
            <value>&quot;Fresno&quot;</value>
            <value>&quot;Hailey&quot;</value>
            <value>&quot;Long Beach&quot;</value>
            <value>&quot;Los Angeles&quot;</value>
            <value>&quot;Oakland&quot;</value>
            <value>&quot;Ontario&quot;</value>
            <value>&quot;Palm Springs&quot;</value>
            <value>&quot;Reno&quot;</value>
            <value>&quot;San Diego&quot;</value>
            <value>&quot;San Francisco&quot;</value>
            <value>&quot;San Jose&quot;</value>
          </bin>
          <bin value='&quot;Austin&quot;'>
            <value>&quot;Austin&quot;</value>
            <value>&quot;Birmingham&quot;</value>
            <value>&quot;Columbus&quot;</value>
            <value>&quot;Dallas-Fort Worth&quot;</value>
            <value>&quot;Greenville&quot;</value>
            <value>&quot;Houston&quot;</value>
            <value>&quot;Little Rock&quot;</value>
            <value>&quot;Lubbock&quot;</value>
            <value>&quot;Memphis&quot;</value>
            <value>&quot;Miami&quot;</value>
            <value>&quot;Midland&quot;</value>
            <value>&quot;New Orleans&quot;</value>
            <value>&quot;Oklahoma City&quot;</value>
            <value>&quot;Sarasota&quot;</value>
            <value>&quot;Tulsa&quot;</value>
          </bin>
          <bin value='&quot;Cedar Rapids&quot;'>
            <value>&quot;Cedar Rapids&quot;</value>
            <value>&quot;Chicago&quot;</value>
            <value>&quot;Cincinnati&quot;</value>
            <value>&quot;Cleveland&quot;</value>
            <value>&quot;Detroit&quot;</value>
            <value>&quot;Indianapolis&quot;</value>
            <value>&quot;Kalamazoo&quot;</value>
            <value>&quot;Kansas City&quot;</value>
            <value>&quot;Louisville&quot;</value>
            <value>&quot;Milwaukee&quot;</value>
            <value>&quot;Minneapolis&quot;</value>
            <value>&quot;Omaha&quot;</value>
            <value>&quot;Pittsburgh&quot;</value>
            <value>&quot;Portland&quot;</value>
            <value>&quot;Rochester&quot;</value>
            <value>&quot;St. Louis&quot;</value>
          </bin>
          <bin value='&quot;Islip&quot;'>
            <value>&quot;Islip&quot;</value>
            <value>&quot;New York&quot;</value>
            <value>&quot;Newark&quot;</value>
            <value>&quot;Philadelphia&quot;</value>
            <value>&quot;Worcester&quot;</value>
          </bin>
        </calculation>
        <aliases>
          <alias key='&quot;Albany&quot;' value='Mid-Atlantic' />
          <alias key='&quot;Aspen&quot;' value='West' />
          <alias key='&quot;Austin&quot;' value='South' />
          <alias key='&quot;Cedar Rapids&quot;' value='Midwest' />
          <alias key='&quot;Islip&quot;' value='Northeast' />
          <alias key='&quot;Yuma&quot;' value='Other' />
        </aliases>
      </column>
      <column datatype='date' datatype-customized='true' name='[Year]' role='dimension' type='quantitative'>
      </column>
      <column-instance column='[Month]' derivation='None' name='[none:Month:qk]' pivot='key' type='quantitative' />
      <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
      <column-instance column='[OLat]' derivation='None' name='[none:OLat:qk]' pivot='key' type='quantitative' />
      <column-instance column='[OLong]' derivation='None' name='[none:OLong:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
      <column-instance column='[02 Flight Count By Airport (copy)]' derivation='User' name='[usr:02 Flight Count By Airport (copy):qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[csv.41677.501581817130].[none:OCity:nk]' ordering-type='Field' />
      </column-instance>
      <column-instance column='[02 Flight Count By Months (copy 2)]' derivation='User' name='[usr:02 Flight Count By Months (copy 2):qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[csv.41677.501581817130].[none:OCity:nk]' ordering-type='Field' />
      </column-instance>
      <column-instance column='[02 Flight Count By Months (copy)]' derivation='User' name='[usr:02 Flight Count By Months (copy):qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[csv.41677.501581817130].[none:Month:qk]' ordering-type='Field' />
      </column-instance>
      <column-instance column='[03 Grab Coefficient Variables (copy)]' derivation='User' name='[usr:03 Grab Coefficient Variables (copy):ok]' pivot='key' type='ordinal'>
        <table-calc ordering-type='Rows' />
        <table-calc field='[csv.41677.501581817130].[Calculation_7320206215923342]' ordering-type='Rows' />
      </column-instance>
      <column-instance column='[Calculation_1340527151300682]' derivation='User' name='[usr:Calculation_1340527151300682:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[csv.41677.501581817130].[none:Month:qk]' ordering-type='Field' />
      </column-instance>
      <group hidden='true' name='[Action (City,Origin)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[City]' />
          <groupfilter function='level-members' level='[Origin]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (Month)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Month]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (OCity)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[OCity]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (OCity,OLat,OLong,Origin)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[OCity]' />
          <groupfilter function='level-members' level='[none:OLat:qk]' />
          <groupfilter function='level-members' level='[none:OLong:qk]' />
          <groupfilter function='level-members' level='[Origin]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (OCity,Origin)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[OCity]' />
          <groupfilter function='level-members' level='[Origin]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (Origin)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Origin]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (City,Origin)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:City:nk]' />
          <groupfilter function='level-members' level='[none:Origin:nk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.459783' measure-ordering='alphabetic' measure-percentage='0.327174' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[csv.41677.501581817130].[usr:02 Flight Count By Months (copy):qk:1]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[csv.41677.501581817130]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[csv.41677.501581817130].[usr:02 Flight Count By Months (copy 2):qk:1]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[csv.41677.501581817130].[usr:02 Flight Count By Airport (copy):qk:1]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[csv.41677.501581817130].[usr:Calculation_1340527151300682:qk:1]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[usr:03 Grab Coefficient Variables (copy):ok]' type='palette'>
            <map to='#1f77b4'>
              <bucket>%null%</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>-1</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>0</bucket>
            </map>
            <map to='#d62728'>
              <bucket>1</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='IP Address ' datatype='string' name='[Parameter 10]' param-domain-type='any' role='measure' type='nominal' value='&quot;localhost&quot;'>
          <calculation class='tableau' formula='&quot;localhost&quot;' />
          <desc>
            <formatted-text>
              <run>Input IP Address of server H2O is launched on</run>
            </formatted-text>
          </desc>
        </column>
        <column caption='Port' datatype='integer' name='[Parameter 11]' param-domain-type='any' role='measure' type='quantitative' value='54321'>
          <calculation class='tableau' formula='54321' />
        </column>
        <column caption='Path To Data' datatype='string' name='[Parameter 12]' param-domain-type='any' role='measure' type='nominal' value='&quot;https://github.com/0xdata/h2o/blob/master/smalldata/airlines/allyears2k_headers.zip?raw=true&quot;'>
          <calculation class='tableau' formula='&quot;https://github.com/0xdata/h2o/blob/master/smalldata/airlines/allyears2k_headers.zip?raw=true&quot;' />
        </column>
        <column caption='Beta' datatype='boolean' name='[Parameter 13]' param-domain-type='list' role='measure' type='nominal' value='true'>
          <calculation class='tableau' formula='true' />
          <members>
            <member value='true' />
            <member value='false' />
          </members>
        </column>
        <column caption='Local H2O Heap Size' datatype='string' name='[Parameter 14]' param-domain-type='any' role='measure' type='nominal' value='&quot;1g&quot;'>
          <calculation class='tableau' formula='&quot;1g&quot;' />
        </column>
        <column caption='(GLM) Lambda' datatype='string' name='[Parameter 15]' param-domain-type='any' role='measure' type='nominal' value='&quot;1.0E-5&quot;'>
          <calculation class='tableau' formula='&quot;1.0E-5&quot;' />
        </column>
        <column caption='(GLM) Response Variable' datatype='string' name='[Parameter 1]' param-domain-type='any' role='measure' type='nominal' value='&quot;Cancelled&quot;'>
          <calculation class='tableau' formula='&quot;Cancelled&quot;' />
        </column>
        <column caption='(GLM) Predictor Variables' datatype='string' name='[Parameter 2]' param-domain-type='any' role='measure' type='nominal' value='&quot;Origin,Dest,UniqueCarrier&quot;'>
          <calculation class='tableau' formula='&quot;Origin,Dest,UniqueCarrier&quot;' />
        </column>
        <column caption='(GLM) Alpha' datatype='real' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='1.0'>
          <calculation class='tableau' formula='1.0' />
          <range granularity='0.25' max='1.0' min='0.0' />
        </column>
        <column caption='(GLM) Cross Validation N-Folds' datatype='integer' name='[Parameter 4]' param-domain-type='range' role='measure' type='quantitative' value='0'>
          <calculation class='tableau' formula='0' />
          <range granularity='1' min='0' />
        </column>
        <column caption='(GLM) Family' datatype='string' name='[Parameter 5]' param-domain-type='list' role='measure' type='nominal' value='&quot;binomial&quot;'>
          <calculation class='tableau' formula='&quot;binomial&quot;' />
          <members>
            <member value='&quot;gaussian&quot;' />
            <member value='&quot;binomial&quot;' />
            <member value='&quot;poisson&quot;' />
            <member value='&quot;gamma&quot;' />
            <member value='&quot;tweedie&quot;' />
          </members>
        </column>
        <column caption='(GLM) Model Name' datatype='string' name='[Parameter 6]' param-domain-type='any' role='measure' type='nominal' value='&quot;data.glm&quot;'>
          <calculation class='tableau' formula='&quot;data.glm&quot;' />
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Online' />
  </mapsources>
  <actions>
    <action caption='Filter' name='[Action1]'>
      <source dashboard='Flight Cancellation Dashboard' type='sheet' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Flight Cancellation Dashboard' />
      </command>
    </action>
    <action caption='Highlight1' name='[Action3]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Flight Cancellation Dashboard' type='sheet' />
      <command command='tsc:brush'>
        <param name='special-fields' value='all' />
        <param name='target' value='Flight Cancellation Dashboard' />
      </command>
    </action>
    <action caption='Filter2' name='[Action4]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Flight Cancellation Dashboard' type='sheet' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Flight Cancellation Dashboard' />
      </command>
    </action>
    <action caption='Highlight2' name='[Action5]'>
      <activation auto-clear='true' />
      <source dashboard='Flight Cancellation Dashboard' type='sheet' />
      <command command='tsc:brush'>
        <param name='special-fields' value='all' />
        <param name='target' value='Flight Cancellation Dashboard' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet lock-quick-filters='true' name='AUC'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#26794a'>&lt;</run>
            <run fontalignment='1' fontcolor='#26794a'>Sheet Name</run>
            <run fontalignment='1' fontcolor='#26794a'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='AUC Value' datatype='real' name='[Calculation_2510527224812934]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='script_real(&quot;&#13;&#10;data.glm@model$auc&#13;&#10;&quot;,&#13;&#10;INDEX() &#13;&#10;)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Calculation_2510527224812934]' derivation='User' name='[usr:Calculation_2510527224812934:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity)]'>
            <groupfilter function='level-members' level='[OCity]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[none:OLat:qk]' />
              <groupfilter function='level-members' level='[none:OLong:qk]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]</column>
            <column>[csv.41677.501581817130].[Action (OCity)]</column>
            <column>[csv.41677.501581817130].[Action (OCity,Origin)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' value='58' />
            <format attr='width' value='112' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width-header' value='10' />
            <format attr='height-header' value='10' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='22' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[csv.41677.501581817130].[usr:Calculation_2510527224812934:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet lock-quick-filters='true' name='Flights By Airport'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000' fontsize='11'>Outgoing flights and Cancellations by Airport</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='Cancellation Count By Airport' datatype='integer' name='[02 Flight Count By Airport (copy)]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx4 = match( .arg1 , origin_canFlights.R$Origin ) &#13;&#10;print(origin_canFlights.R[idx4,]$C1)&#13;&#10;origin_canFlights.R[idx4,]$C1&#13;&#10;&quot;,&#13;&#10;ATTR([Origin]))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Flight Count By Airport' datatype='integer' name='[02 Flight Count By Months (copy 2)]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx3 = match( .arg1 , originFlights.R$Origin ) &#13;&#10;print(originFlights.R[idx3,]$C1)&#13;&#10;originFlights.R[idx3,]$C1&#13;&#10;&quot;,&#13;&#10;ATTR([Origin])&#13;&#10;)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
            <column-instance column='[02 Flight Count By Airport (copy)]' derivation='User' name='[usr:02 Flight Count By Airport (copy):qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[csv.41677.501581817130].[none:Origin:nk]' ordering-type='Field' />
            </column-instance>
            <column-instance column='[02 Flight Count By Months (copy 2)]' derivation='User' name='[usr:02 Flight Count By Months (copy 2):qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[csv.41677.501581817130].[none:Origin:nk]' ordering-type='Field' />
            </column-instance>
          </datasource-dependencies>
          <sort class='manual' column='[csv.41677.501581817130].[none:Origin:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;PIT&quot;</bucket>
              <bucket>&quot;BOS&quot;</bucket>
              <bucket>&quot;ORD&quot;</bucket>
              <bucket>&quot;DEN&quot;</bucket>
              <bucket>&quot;DCA&quot;</bucket>
              <bucket>&quot;PHL&quot;</bucket>
              <bucket>&quot;CLT&quot;</bucket>
              <bucket>&quot;BUR&quot;</bucket>
              <bucket>&quot;BWI&quot;</bucket>
              <bucket>&quot;EWR&quot;</bucket>
              <bucket>&quot;STL&quot;</bucket>
              <bucket>&quot;LGA&quot;</bucket>
              <bucket>&quot;ROC&quot;</bucket>
              <bucket>&quot;SYR&quot;</bucket>
              <bucket>&quot;LAX&quot;</bucket>
              <bucket>&quot;DFW&quot;</bucket>
              <bucket>&quot;AUS&quot;</bucket>
              <bucket>&quot;TPA&quot;</bucket>
              <bucket>&quot;COS&quot;</bucket>
              <bucket>&quot;SFO&quot;</bucket>
              <bucket>&quot;ATL&quot;</bucket>
              <bucket>&quot;ABQ&quot;</bucket>
              <bucket>&quot;CMH&quot;</bucket>
              <bucket>&quot;CLE&quot;</bucket>
              <bucket>&quot;PVD&quot;</bucket>
              <bucket>&quot;OAK&quot;</bucket>
              <bucket>&quot;SAN&quot;</bucket>
              <bucket>&quot;MHT&quot;</bucket>
              <bucket>&quot;MDT&quot;</bucket>
              <bucket>&quot;GSO&quot;</bucket>
              <bucket>&quot;ORF&quot;</bucket>
              <bucket>&quot;BUF&quot;</bucket>
              <bucket>&quot;SWF&quot;</bucket>
              <bucket>&quot;IND&quot;</bucket>
              <bucket>&quot;MDW&quot;</bucket>
              <bucket>&quot;MCO&quot;</bucket>
              <bucket>&quot;RIC&quot;</bucket>
              <bucket>&quot;LAS&quot;</bucket>
              <bucket>&quot;AVP&quot;</bucket>
              <bucket>&quot;CRW&quot;</bucket>
              <bucket>&quot;PWM&quot;</bucket>
              <bucket>&quot;HPN&quot;</bucket>
              <bucket>&quot;BDL&quot;</bucket>
              <bucket>&quot;SJC&quot;</bucket>
              <bucket>&quot;RDU&quot;</bucket>
              <bucket>&quot;PHX&quot;</bucket>
              <bucket>&quot;LYH&quot;</bucket>
              <bucket>&quot;ERI&quot;</bucket>
              <bucket>&quot;CHO&quot;</bucket>
              <bucket>&quot;MYR&quot;</bucket>
              <bucket>&quot;BTV&quot;</bucket>
              <bucket>&quot;PDX&quot;</bucket>
              <bucket>&quot;DAL&quot;</bucket>
              <bucket>&quot;MIA&quot;</bucket>
              <bucket>&quot;SLC&quot;</bucket>
              <bucket>&quot;DTW&quot;</bucket>
              <bucket>&quot;BGM&quot;</bucket>
              <bucket>&quot;ROA&quot;</bucket>
              <bucket>&quot;RSW&quot;</bucket>
              <bucket>&quot;CAE&quot;</bucket>
              <bucket>&quot;DSM&quot;</bucket>
              <bucket>&quot;CHS&quot;</bucket>
              <bucket>&quot;DAY&quot;</bucket>
              <bucket>&quot;SAT&quot;</bucket>
              <bucket>&quot;MKE&quot;</bucket>
              <bucket>&quot;HOU&quot;</bucket>
              <bucket>&quot;IAH&quot;</bucket>
              <bucket>&quot;MSP&quot;</bucket>
              <bucket>&quot;MRY&quot;</bucket>
              <bucket>&quot;TLH&quot;</bucket>
              <bucket>&quot;ISP&quot;</bucket>
              <bucket>&quot;OMA&quot;</bucket>
              <bucket>&quot;SJU&quot;</bucket>
              <bucket>&quot;SMF&quot;</bucket>
              <bucket>&quot;SNA&quot;</bucket>
              <bucket>&quot;SEA&quot;</bucket>
              <bucket>&quot;JFK&quot;</bucket>
              <bucket>&quot;CVG&quot;</bucket>
              <bucket>&quot;UCA&quot;</bucket>
              <bucket>&quot;STX&quot;</bucket>
              <bucket>&quot;MLB&quot;</bucket>
              <bucket>&quot;BOI&quot;</bucket>
              <bucket>&quot;SRQ&quot;</bucket>
              <bucket>&quot;PSP&quot;</bucket>
              <bucket>&quot;SBN&quot;</bucket>
              <bucket>&quot;ABE&quot;</bucket>
              <bucket>&quot;TUS&quot;</bucket>
              <bucket>&quot;RNO&quot;</bucket>
              <bucket>&quot;PBI&quot;</bucket>
              <bucket>&quot;ALB&quot;</bucket>
              <bucket>&quot;SDF&quot;</bucket>
              <bucket>&quot;ONT&quot;</bucket>
              <bucket>&quot;MSY&quot;</bucket>
              <bucket>&quot;BNA&quot;</bucket>
              <bucket>&quot;MCI&quot;</bucket>
              <bucket>&quot;MEM&quot;</bucket>
              <bucket>&quot;IAD&quot;</bucket>
              <bucket>&quot;SCK&quot;</bucket>
              <bucket>&quot;ACY&quot;</bucket>
              <bucket>&quot;EGE&quot;</bucket>
              <bucket>&quot;EYW&quot;</bucket>
              <bucket>&quot;KOA&quot;</bucket>
              <bucket>&quot;GNV&quot;</bucket>
              <bucket>&quot;LIH&quot;</bucket>
              <bucket>&quot;PHF&quot;</bucket>
              <bucket>&quot;STT&quot;</bucket>
              <bucket>&quot;MFR&quot;</bucket>
              <bucket>&quot;BIL&quot;</bucket>
              <bucket>&quot;TRI&quot;</bucket>
              <bucket>&quot;OGG&quot;</bucket>
              <bucket>&quot;HRL&quot;</bucket>
              <bucket>&quot;CRP&quot;</bucket>
              <bucket>&quot;MAF&quot;</bucket>
              <bucket>&quot;AMA&quot;</bucket>
              <bucket>&quot;LBB&quot;</bucket>
              <bucket>&quot;LAN&quot;</bucket>
              <bucket>&quot;LEX&quot;</bucket>
              <bucket>&quot;GEG&quot;</bucket>
              <bucket>&quot;JAN&quot;</bucket>
              <bucket>&quot;SAV&quot;</bucket>
              <bucket>&quot;TYS&quot;</bucket>
              <bucket>&quot;ELP&quot;</bucket>
              <bucket>&quot;HNL&quot;</bucket>
              <bucket>&quot;BHM&quot;</bucket>
              <bucket>&quot;LIT&quot;</bucket>
              <bucket>&quot;ICT&quot;</bucket>
              <bucket>&quot;OKC&quot;</bucket>
              <bucket>&quot;JAX&quot;</bucket>
              <bucket>&quot;GRR&quot;</bucket>
              <bucket>&quot;TUL&quot;</bucket>
              <bucket>&quot;ANC&quot;</bucket>
              <bucket>&quot;FLL&quot;</bucket>
              <bucket>%null%</bucket>
              <bucket>&quot;BFF&quot;</bucket>
              <bucket>&quot;BFI&quot;</bucket>
              <bucket>&quot;CKB&quot;</bucket>
              <bucket>&quot;CYS&quot;</bucket>
              <bucket>&quot;FMN&quot;</bucket>
              <bucket>&quot;GLH&quot;</bucket>
              <bucket>&quot;MKC&quot;</bucket>
              <bucket>&quot;OGD&quot;</bucket>
              <bucket>&quot;PIR&quot;</bucket>
              <bucket>&quot;PVU&quot;</bucket>
              <bucket>&quot;ANI&quot;</bucket>
              <bucket>&quot;BJI&quot;</bucket>
              <bucket>&quot;GCC&quot;</bucket>
              <bucket>&quot;ILG&quot;</bucket>
              <bucket>&quot;LMT&quot;</bucket>
              <bucket>&quot;LNY&quot;</bucket>
              <bucket>&quot;LWS&quot;</bucket>
              <bucket>&quot;MIB&quot;</bucket>
              <bucket>&quot;MKG&quot;</bucket>
              <bucket>&quot;MKK&quot;</bucket>
              <bucket>&quot;MTH&quot;</bucket>
              <bucket>&quot;OTH&quot;</bucket>
              <bucket>&quot;RDR&quot;</bucket>
              <bucket>&quot;RHI&quot;</bucket>
              <bucket>&quot;ROW&quot;</bucket>
              <bucket>&quot;YAP&quot;</bucket>
              <bucket>&quot;YKM&quot;</bucket>
              <bucket>&quot;ADK&quot;</bucket>
              <bucket>&quot;EAU&quot;</bucket>
              <bucket>&quot;HKY&quot;</bucket>
              <bucket>&quot;INL&quot;</bucket>
              <bucket>&quot;LWB&quot;</bucket>
              <bucket>&quot;MAZ&quot;</bucket>
              <bucket>&quot;PLN&quot;</bucket>
              <bucket>&quot;PSE&quot;</bucket>
              <bucket>&quot;RFD&quot;</bucket>
              <bucket>&quot;RKS&quot;</bucket>
              <bucket>&quot;SLE&quot;</bucket>
              <bucket>&quot;SOP&quot;</bucket>
              <bucket>&quot;CMX&quot;</bucket>
              <bucket>&quot;EWN&quot;</bucket>
              <bucket>&quot;HHH&quot;</bucket>
              <bucket>&quot;CCR&quot;</bucket>
              <bucket>&quot;WYS&quot;</bucket>
              <bucket>&quot;CDC&quot;</bucket>
              <bucket>&quot;COD&quot;</bucket>
              <bucket>&quot;GST&quot;</bucket>
              <bucket>&quot;OXR&quot;</bucket>
              <bucket>&quot;PIE&quot;</bucket>
              <bucket>&quot;PMD&quot;</bucket>
              <bucket>&quot;BQK&quot;</bucket>
              <bucket>&quot;BQN&quot;</bucket>
              <bucket>&quot;IPL&quot;</bucket>
              <bucket>&quot;KSM&quot;</bucket>
              <bucket>&quot;PUB&quot;</bucket>
              <bucket>&quot;VCT&quot;</bucket>
              <bucket>&quot;ACK&quot;</bucket>
              <bucket>&quot;ROR&quot;</bucket>
              <bucket>&quot;TEX&quot;</bucket>
              <bucket>&quot;TUP&quot;</bucket>
              <bucket>&quot;APF&quot;</bucket>
              <bucket>&quot;CEC&quot;</bucket>
              <bucket>&quot;SGU&quot;</bucket>
              <bucket>&quot;TTN&quot;</bucket>
              <bucket>&quot;ALO&quot;</bucket>
              <bucket>&quot;BLI&quot;</bucket>
              <bucket>&quot;CIC&quot;</bucket>
              <bucket>&quot;ITO&quot;</bucket>
              <bucket>&quot;LCH&quot;</bucket>
              <bucket>&quot;PIH&quot;</bucket>
              <bucket>&quot;VIS&quot;</bucket>
              <bucket>&quot;EFD&quot;</bucket>
              <bucket>&quot;ABY&quot;</bucket>
              <bucket>&quot;ROP&quot;</bucket>
              <bucket>&quot;TWF&quot;</bucket>
              <bucket>&quot;FLO&quot;</bucket>
              <bucket>&quot;GUC&quot;</bucket>
              <bucket>&quot;ISO&quot;</bucket>
              <bucket>&quot;RDM&quot;</bucket>
              <bucket>&quot;YAK&quot;</bucket>
              <bucket>&quot;BPT&quot;</bucket>
              <bucket>&quot;CLD&quot;</bucket>
              <bucket>&quot;GCN&quot;</bucket>
              <bucket>&quot;GGG&quot;</bucket>
              <bucket>&quot;MCN&quot;</bucket>
              <bucket>&quot;MEI&quot;</bucket>
              <bucket>&quot;GTR&quot;</bucket>
              <bucket>&quot;IYK&quot;</bucket>
              <bucket>&quot;SCE&quot;</bucket>
              <bucket>&quot;DLG&quot;</bucket>
              <bucket>&quot;TVL&quot;</bucket>
              <bucket>&quot;AKN&quot;</bucket>
              <bucket>&quot;MOT&quot;</bucket>
              <bucket>&quot;SMX&quot;</bucket>
              <bucket>&quot;BRO&quot;</bucket>
              <bucket>&quot;MQT&quot;</bucket>
              <bucket>&quot;SPI&quot;</bucket>
              <bucket>&quot;SPN&quot;</bucket>
              <bucket>&quot;VLD&quot;</bucket>
              <bucket>&quot;ABI&quot;</bucket>
              <bucket>&quot;OAJ&quot;</bucket>
              <bucket>&quot;GUM&quot;</bucket>
              <bucket>&quot;RDD&quot;</bucket>
              <bucket>&quot;SUX&quot;</bucket>
              <bucket>&quot;CWA&quot;</bucket>
              <bucket>&quot;FCA&quot;</bucket>
              <bucket>&quot;HVN&quot;</bucket>
              <bucket>&quot;SIT&quot;</bucket>
              <bucket>&quot;YUM&quot;</bucket>
              <bucket>&quot;CDV&quot;</bucket>
              <bucket>&quot;HLN&quot;</bucket>
              <bucket>&quot;LRD&quot;</bucket>
              <bucket>&quot;SCC&quot;</bucket>
              <bucket>&quot;TXK&quot;</bucket>
              <bucket>&quot;AEX&quot;</bucket>
              <bucket>&quot;DHN&quot;</bucket>
              <bucket>&quot;FSM&quot;</bucket>
              <bucket>&quot;MTJ&quot;</bucket>
              <bucket>&quot;ELM&quot;</bucket>
              <bucket>&quot;LAW&quot;</bucket>
              <bucket>&quot;EKO&quot;</bucket>
              <bucket>&quot;ITH&quot;</bucket>
              <bucket>&quot;MOD&quot;</bucket>
              <bucket>&quot;PSC&quot;</bucket>
              <bucket>&quot;SJT&quot;</bucket>
              <bucket>&quot;BTM&quot;</bucket>
              <bucket>&quot;CPR&quot;</bucket>
              <bucket>&quot;DRO&quot;</bucket>
              <bucket>&quot;BET&quot;</bucket>
              <bucket>&quot;DET&quot;</bucket>
              <bucket>&quot;GFK&quot;</bucket>
              <bucket>&quot;TYR&quot;</bucket>
              <bucket>&quot;PFN&quot;</bucket>
              <bucket>&quot;BRW&quot;</bucket>
              <bucket>&quot;ILE&quot;</bucket>
              <bucket>&quot;HTS&quot;</bucket>
              <bucket>&quot;IDA&quot;</bucket>
              <bucket>&quot;HDN&quot;</bucket>
              <bucket>&quot;WRG&quot;</bucket>
              <bucket>&quot;SPS&quot;</bucket>
              <bucket>&quot;DBQ&quot;</bucket>
              <bucket>&quot;BFL&quot;</bucket>
              <bucket>&quot;BIS&quot;</bucket>
              <bucket>&quot;OTZ&quot;</bucket>
              <bucket>&quot;CLL&quot;</bucket>
              <bucket>&quot;FLG&quot;</bucket>
              <bucket>&quot;MLU&quot;</bucket>
              <bucket>&quot;OME&quot;</bucket>
              <bucket>&quot;ACT&quot;</bucket>
              <bucket>&quot;ACV&quot;</bucket>
              <bucket>&quot;GJT&quot;</bucket>
              <bucket>&quot;CSG&quot;</bucket>
              <bucket>&quot;GRK&quot;</bucket>
              <bucket>&quot;MFE&quot;</bucket>
              <bucket>&quot;ADQ&quot;</bucket>
              <bucket>&quot;FAY&quot;</bucket>
              <bucket>&quot;PSG&quot;</bucket>
              <bucket>&quot;ORH&quot;</bucket>
              <bucket>&quot;KTN&quot;</bucket>
              <bucket>&quot;LFT&quot;</bucket>
              <bucket>&quot;LSE&quot;</bucket>
              <bucket>&quot;MSO&quot;</bucket>
              <bucket>&quot;SBP&quot;</bucket>
              <bucket>&quot;JAC&quot;</bucket>
              <bucket>&quot;DAB&quot;</bucket>
              <bucket>&quot;BZN&quot;</bucket>
              <bucket>&quot;CMI&quot;</bucket>
              <bucket>&quot;DLH&quot;</bucket>
              <bucket>&quot;MGM&quot;</bucket>
              <bucket>&quot;RAP&quot;</bucket>
              <bucket>&quot;GPT&quot;</bucket>
              <bucket>&quot;FNT&quot;</bucket>
              <bucket>&quot;BMI&quot;</bucket>
              <bucket>&quot;TVC&quot;</bucket>
              <bucket>&quot;ATW&quot;</bucket>
              <bucket>&quot;GTF&quot;</bucket>
              <bucket>&quot;SUN&quot;</bucket>
              <bucket>&quot;AGS&quot;</bucket>
              <bucket>&quot;VPS&quot;</bucket>
              <bucket>&quot;ASE&quot;</bucket>
              <bucket>&quot;DUT&quot;</bucket>
              <bucket>&quot;AVL&quot;</bucket>
              <bucket>&quot;ILM&quot;</bucket>
              <bucket>&quot;LGB&quot;</bucket>
              <bucket>&quot;LNK&quot;</bucket>
              <bucket>&quot;EUG&quot;</bucket>
              <bucket>&quot;TOL&quot;</bucket>
              <bucket>&quot;FAR&quot;</bucket>
              <bucket>&quot;PIA&quot;</bucket>
              <bucket>&quot;BGR&quot;</bucket>
              <bucket>&quot;CHA&quot;</bucket>
              <bucket>&quot;FAT&quot;</bucket>
              <bucket>&quot;MOB&quot;</bucket>
              <bucket>&quot;CAK&quot;</bucket>
              <bucket>&quot;EVV&quot;</bucket>
              <bucket>&quot;FAI&quot;</bucket>
              <bucket>&quot;MLI&quot;</bucket>
              <bucket>&quot;FSD&quot;</bucket>
              <bucket>&quot;MBS&quot;</bucket>
              <bucket>&quot;GRB&quot;</bucket>
              <bucket>&quot;JNU&quot;</bucket>
              <bucket>&quot;SBA&quot;</bucket>
              <bucket>&quot;RST&quot;</bucket>
              <bucket>&quot;BTR&quot;</bucket>
              <bucket>&quot;FWA&quot;</bucket>
              <bucket>&quot;SGF&quot;</bucket>
              <bucket>&quot;SHV&quot;</bucket>
              <bucket>&quot;AZO&quot;</bucket>
              <bucket>&quot;XNA&quot;</bucket>
              <bucket>&quot;PNS&quot;</bucket>
              <bucket>&quot;HSV&quot;</bucket>
              <bucket>&quot;MSN&quot;</bucket>
              <bucket>&quot;CID&quot;</bucket>
              <bucket>&quot;GSP&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='stroke-color' id='refline0' value='#000000' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='div-level' scope='rows' value='10' />
            <format attr='div-level' scope='cols' value='10' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[csv.41677.501581817130].[usr:02 Flight Count By Months (copy 2):qk:2]' />
            </encodings>
            <reference-line axis-column='[csv.41677.501581817130].[usr:02 Flight Count By Airport (copy):qk:2]' formula='average' id='refline0' label-type='none' scope='per-cell' value-column='[csv.41677.501581817130].[usr:02 Flight Count By Months (copy 2):qk:2]' z-order='2' />
            <reference-line axis-column='[csv.41677.501581817130].[usr:02 Flight Count By Airport (copy):qk:2]' fill-above='true' fill-below='true' formula='average' id='refline1' label-type='none' percentage-bands='true' scope='per-cell' symmetric='false' value-column='[csv.41677.501581817130].[usr:02 Flight Count By Months (copy 2):qk:2]' z-order='1'>
              <reference-line-value percentage='60' />
              <reference-line-value percentage='80' />
            </reference-line>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[csv.41677.501581817130].[usr:02 Flight Count By Airport (copy):qk:2]</rows>
        <cols>[csv.41677.501581817130].[none:Origin:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Flights By Month'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Number of Flights by Month</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='Cancellation Count By Months' datatype='integer' name='[02 Flight Count By Months (copy)]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx2 = match( .arg1 , canFlights.R$Month ) &#13;&#10;print(canFlights.R[idx2,]$C1)&#13;&#10;if ( !is.na( .arg1 ) ) { canFlights.R[idx2,]$C1&#13;&#10;} else {&apos;Filter out Null values&apos;}&#13;&#10;&quot;,&#13;&#10;ATTR([Month])&#13;&#10;)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Flight Count By Months' datatype='integer' name='[Calculation_1340527151300682]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='script_int(&quot;&#13;&#10;## match to the correct row&#13;&#10;idx = match( .arg1 , numFlights.R$Month ) &#13;&#10;print(numFlights.R[idx,]$C1)&#13;&#10;if ( !is.na( .arg1 ) ) { numFlights.R[idx,]$C1&#13;&#10;} else {&apos;Filter out Null values&apos;}&#13;&#10;&quot;,&#13;&#10;ATTR([Month])&#13;&#10;)' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='real' datatype-customized='true' name='[Month]' role='dimension' type='quantitative'>
            </column>
            <column-instance column='[Month]' derivation='None' name='[none:Month:qk]' pivot='key' type='quantitative' />
            <column-instance column='[02 Flight Count By Months (copy)]' derivation='User' name='[usr:02 Flight Count By Months (copy):qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[csv.41677.501581817130].[none:Month:qk]' ordering-type='Field' />
            </column-instance>
            <column-instance column='[Calculation_1340527151300682]' derivation='User' name='[usr:Calculation_1340527151300682:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[csv.41677.501581817130].[none:Month:qk]' ordering-type='Field' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity)]'>
            <groupfilter function='level-members' level='[OCity]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[none:OLat:qk]' />
              <groupfilter function='level-members' level='[none:OLong:qk]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[csv.41677.501581817130].[none:Month:qk]' included-values='non-null'>
          </filter>
          <slices>
            <column>[csv.41677.501581817130].[none:Month:qk]</column>
            <column>[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]</column>
            <column>[csv.41677.501581817130].[Action (OCity)]</column>
            <column>[csv.41677.501581817130].[Action (OCity,Origin)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[none:Month:qk]' field-type='quantitative' max='15.214643265225016' min='-2.4681243184348229' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[usr:02 Flight Count By Months (copy):qk:1]' field-type='quantitative' max='19454' min='-3163' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[usr:Calculation_1340527151300682:qk:1]' field-type='quantitative' fold='true' max='669481' min='-108879' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[csv.41677.501581817130].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='1' y-axis-name='[csv.41677.501581817130].[usr:02 Flight Count By Months (copy):qk:1]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[csv.41677.501581817130].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[csv.41677.501581817130].[usr:Calculation_1340527151300682:qk:1]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[csv.41677.501581817130].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([csv.41677.501581817130].[usr:02 Flight Count By Months (copy):qk:1] + [csv.41677.501581817130].[usr:Calculation_1340527151300682:qk:1])</rows>
        <cols>[csv.41677.501581817130].[none:Month:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Geo Map'>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Online' />
          </mapsources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='Variable Coefficients' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column aggregation='Avg' datatype='real' name='[OLat]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
            </column>
            <column aggregation='Avg' datatype='real' name='[OLong]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
            </column>
            <column-instance column='[OLat]' derivation='None' name='[none:OLat:qk]' pivot='key' type='quantitative' />
            <column-instance column='[OLong]' derivation='None' name='[none:OLong:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[none:OLong:qk]' field-type='quantitative' max='34007519.899238408' min='20016486.241919756' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[none:OLat:qk]' field-type='quantitative' max='12178612.901145922' min='1285826.790319737' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' palette='tableau-red-green' reverse='true' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='um_light_countries' value='true' />
            <format attr='enabled' id='um_light_states' value='true' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='false' />
            <format attr='enabled' id='pp2_statelabels' value='false' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[csv.41677.501581817130].[none:OLat:qk]</rows>
        <cols>[csv.41677.501581817130].[none:OLong:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Geo Map  w.o. Null'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Where are delays the worst?&#10;</run>
            <run fontcolor='#f1923e' fontsize='11' italic='true'>Hover over a city to see it&apos;s rank comparative to other airports in its region and whether its in the worst 5 or best 5 cities.</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Online' />
          </mapsources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='Variable Coefficient Signage' datatype='integer' name='[03 Grab Coefficient Variables (copy)]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SIGN([Calculation_7320206215923342])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Variable Coefficients' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column aggregation='Avg' datatype='real' name='[OLat]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
            </column>
            <column aggregation='Avg' datatype='real' name='[OLong]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
            </column>
            <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[OLat]' derivation='None' name='[none:OLat:qk]' pivot='key' type='quantitative' />
            <column-instance column='[OLong]' derivation='None' name='[none:OLong:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
            <column-instance column='[03 Grab Coefficient Variables (copy)]' derivation='User' name='[usr:03 Grab Coefficient Variables (copy):ok]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[csv.41677.501581817130].[Calculation_7320206215923342]' ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[none:OCity:nk]'>
            <groupfilter function='level-members' level='[none:OCity:nk]' />
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[none:Origin:nk]'>
            <groupfilter function='level-members' level='[none:Origin:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[usr:03 Grab Coefficient Variables (copy):ok]' member='-1' />
              <groupfilter function='member' level='[usr:03 Grab Coefficient Variables (copy):ok]' member='1' />
            </groupfilter>
          </filter>
          <slices>
            <column>[csv.41677.501581817130].[none:Origin:nk]</column>
            <column>[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]</column>
            <column>[csv.41677.501581817130].[Action (OCity,Origin)]</column>
            <column>[csv.41677.501581817130].[none:OCity:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[none:OLong:qk]' field-type='quantitative' max='34126850.334283739' min='20363084.785862178' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[csv.41677.501581817130].[none:OLat:qk]' field-type='quantitative' max='8190544.1534709409' min='1352495.2863562535' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[csv.41677.501581817130].[none:OLong:qk]' value='false' />
            <format attr='in-tooltip' field='[csv.41677.501581817130].[none:OLat:qk]' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='um_light_countries' value='true' />
            <format attr='enabled' id='um_light_states' value='true' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='false' />
            <format attr='enabled' id='pp2_statelabels' value='false' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <size column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' />
              <color column='[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]' />
              <lod column='[csv.41677.501581817130].[none:Origin:nk]' />
              <lod column='[csv.41677.501581817130].[none:OCity:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.2853591442108154' />
                <format attr='shape' value=':filled/plus' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[csv.41677.501581817130].[none:OLat:qk]</rows>
        <cols>[csv.41677.501581817130].[none:OLong:qk]</cols>
      </table>
    </worksheet>
    <worksheet lock-quick-filters='true' name='Heat Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Which airports in your city should you take?&#10;</run>
            <run fontcolor='#f1923e' italic='true'>Same city comparison of airports as well as region wide comparison of flight cancelllations with highly affected cities on the forefront.</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='Variable Coefficients' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Field'>
                <order field='[csv.41677.501581817130].[none:OCity:nk]' />
                <order field='[csv.41677.501581817130].[none:Origin:nk]' />
              </table-calc>
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='752' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' palette='area-red-green' reverse='true' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' value='false' />
            <format attr='break-on-special' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' value='false' />
            <format attr='show-null-value-warning' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' value='false' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' value='(GLM) Coefficient Variables'>
              <formatted-text>
                <run>(GLM) Coefficient Variables</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' />
              <color column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' />
              <text column='[csv.41677.501581817130].[none:OCity:nk]' />
              <text column='[csv.41677.501581817130].[none:Origin:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet name='Parameters Control'>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='Index' datatype='integer' name='[Calculation_0230903195627598]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='Index()' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Calculation_0230903195627598]' derivation='User' name='[usr:Calculation_0230903195627598:qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='parameter-ctrl'>
            <format attr='border-width' value='2' />
            <format attr='border-style' value='solid' />
          </style-rule>
          <style-rule element='parameter-ctrl-title'>
            <format attr='text-align' value='right' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' />
            </encodings>
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet lock-quick-filters='true' name='Regional Distribution'>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='Variable Coefficients' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Regional Groups]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
              <calculation class='categorical-bin' column='[OCity]' default='&quot;Yuma&quot;'>
                <bin value='&quot;Albany&quot;'>
                  <value>&quot;Albany&quot;</value>
                  <value>&quot;Charlotte&quot;</value>
                  <value>&quot;Greensboro&quot;</value>
                  <value>&quot;Raleigh-durham&quot;</value>
                  <value>&quot;Richmond&quot;</value>
                  <value>&quot;Roanoke VA&quot;</value>
                  <value>&quot;Washington&quot;</value>
                </bin>
                <bin value='&quot;Aspen&quot;'>
                  <value>&quot;Aspen&quot;</value>
                  <value>&quot;Boise&quot;</value>
                  <value>&quot;Colorado Springs&quot;</value>
                  <value>&quot;Denver&quot;</value>
                  <value>&quot;Fresno&quot;</value>
                  <value>&quot;Hailey&quot;</value>
                  <value>&quot;Long Beach&quot;</value>
                  <value>&quot;Los Angeles&quot;</value>
                  <value>&quot;Oakland&quot;</value>
                  <value>&quot;Ontario&quot;</value>
                  <value>&quot;Palm Springs&quot;</value>
                  <value>&quot;Reno&quot;</value>
                  <value>&quot;San Diego&quot;</value>
                  <value>&quot;San Francisco&quot;</value>
                  <value>&quot;San Jose&quot;</value>
                </bin>
                <bin value='&quot;Austin&quot;'>
                  <value>&quot;Austin&quot;</value>
                  <value>&quot;Birmingham&quot;</value>
                  <value>&quot;Columbus&quot;</value>
                  <value>&quot;Dallas-Fort Worth&quot;</value>
                  <value>&quot;Greenville&quot;</value>
                  <value>&quot;Houston&quot;</value>
                  <value>&quot;Little Rock&quot;</value>
                  <value>&quot;Lubbock&quot;</value>
                  <value>&quot;Memphis&quot;</value>
                  <value>&quot;Miami&quot;</value>
                  <value>&quot;Midland&quot;</value>
                  <value>&quot;New Orleans&quot;</value>
                  <value>&quot;Oklahoma City&quot;</value>
                  <value>&quot;Sarasota&quot;</value>
                  <value>&quot;Tulsa&quot;</value>
                </bin>
                <bin value='&quot;Cedar Rapids&quot;'>
                  <value>&quot;Cedar Rapids&quot;</value>
                  <value>&quot;Chicago&quot;</value>
                  <value>&quot;Cincinnati&quot;</value>
                  <value>&quot;Cleveland&quot;</value>
                  <value>&quot;Detroit&quot;</value>
                  <value>&quot;Indianapolis&quot;</value>
                  <value>&quot;Kalamazoo&quot;</value>
                  <value>&quot;Kansas City&quot;</value>
                  <value>&quot;Louisville&quot;</value>
                  <value>&quot;Milwaukee&quot;</value>
                  <value>&quot;Minneapolis&quot;</value>
                  <value>&quot;Omaha&quot;</value>
                  <value>&quot;Pittsburgh&quot;</value>
                  <value>&quot;Portland&quot;</value>
                  <value>&quot;Rochester&quot;</value>
                  <value>&quot;St. Louis&quot;</value>
                </bin>
                <bin value='&quot;Islip&quot;'>
                  <value>&quot;Islip&quot;</value>
                  <value>&quot;New York&quot;</value>
                  <value>&quot;Newark&quot;</value>
                  <value>&quot;Philadelphia&quot;</value>
                  <value>&quot;Worcester&quot;</value>
                </bin>
              </calculation>
              <aliases>
                <alias key='&quot;Albany&quot;' value='Mid-Atlantic' />
                <alias key='&quot;Aspen&quot;' value='West' />
                <alias key='&quot;Austin&quot;' value='South' />
                <alias key='&quot;Cedar Rapids&quot;' value='Midwest' />
                <alias key='&quot;Islip&quot;' value='Northeast' />
                <alias key='&quot;Yuma&quot;' value='Other' />
              </aliases>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:qk:5]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[csv.41677.501581817130].[Regional Groups]' ordering-type='Field' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[none:OLat:qk]' />
              <groupfilter function='level-members' level='[none:OLong:qk]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]</column>
            <column>[csv.41677.501581817130].[Action (OCity,Origin)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[csv.41677.501581817130].[Regional Groups]' value='95' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <lod column='[csv.41677.501581817130].[none:OCity:nk]' />
            </encodings>
            <reference-line axis-column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:5]' boxplot-mark-exclusion='false' boxplot-whisker-type='standard' formula='average' id='refline0' label-type='automatic' scope='per-cell' symmetric='false' value-column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:5]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25' />
                <format attr='shape' value=':filled/plus' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:5]</rows>
        <cols>[csv.41677.501581817130].[Regional Groups]</cols>
      </table>
    </worksheet>
    <worksheet lock-quick-filters='true' name='Table Chart'>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='Option : Null' datatype='real' name='[Calculation_0840422201739178]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IIF([Calculation_7320206215923342]==0,Null,[Calculation_7320206215923342])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Variable Coefficients' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_0840422201739178]' derivation='User' name='[usr:Calculation_0840422201739178:ok]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[csv.41677.501581817130].[Calculation_7320206215923342]' ordering-type='Field'>
                <order field='[csv.41677.501581817130].[none:OCity:nk]' />
                <order field='[csv.41677.501581817130].[none:Origin:nk]' />
              </table-calc>
            </column-instance>
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:ok:1]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Field'>
                <order field='[csv.41677.501581817130].[none:OCity:nk]' />
                <order field='[csv.41677.501581817130].[none:Origin:nk]' />
              </table-calc>
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[usr:Calculation_0840422201739178:ok]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[usr:Calculation_0840422201739178:ok]' />
              <groupfilter function='member' level='[usr:Calculation_0840422201739178:ok]' member='%null%' />
            </groupfilter>
          </filter>
          <sort class='alphabetic' column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:ok:1]' direction='DESC' />
          <slices>
            <column>[csv.41677.501581817130].[usr:Calculation_0840422201739178:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[csv.41677.501581817130].[usr:Calculation_0840422201739178:ok]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([csv.41677.501581817130].[none:Origin:nk] / ([csv.41677.501581817130].[none:OCity:nk] / [csv.41677.501581817130].[usr:Calculation_7320206215923342:ok:1]))</rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet name='Variable Importance'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Variable Importance of Origin Points&#10;</run>
            <run fontcolor='#f1923e' italic='true'>Move index sliders to view the top 10 or bottom 10 airports for cancellations.</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='airlines_meta' name='csv.41677.501581817130' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='csv.41677.501581817130'>
            <column caption='Variable Coefficient Signage' datatype='integer' name='[03 Grab Coefficient Variables (copy)]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SIGN([Calculation_7320206215923342])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Index' datatype='integer' name='[Calculation_0230903195627598]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='Index()' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Variable Coefficients' datatype='real' name='[Calculation_7320206215923342]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_REAL(&quot;glmModelTemp = eval(parse(text = .arg3 ))&#13;&#10;tableau_catFormat( glmModelTemp, .arg1 , .arg2)&quot;,&#13;&#10;&apos;Origin&apos;, ATTR([Origin]),[Parameters].[Parameter 6])' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[OCity]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[Origin]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[OCity]' derivation='None' name='[none:OCity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Origin]' derivation='None' name='[none:Origin:nk]' pivot='key' type='nominal' />
            <column-instance column='[03 Grab Coefficient Variables (copy)]' derivation='User' name='[usr:03 Grab Coefficient Variables (copy):ok]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Rows' />
              <table-calc field='[csv.41677.501581817130].[Calculation_7320206215923342]' ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_0230903195627598]' derivation='User' name='[usr:Calculation_0230903195627598:qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_7320206215923342]' derivation='User' name='[usr:Calculation_7320206215923342:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[OCity]' />
              <groupfilter function='level-members' level='[none:OLat:qk]' />
              <groupfilter function='level-members' level='[none:OLong:qk]' />
              <groupfilter function='level-members' level='[Origin]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[csv.41677.501581817130].[none:OCity:nk]'>
            <groupfilter function='level-members' level='[none:OCity:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <sort class='manual' column='[csv.41677.501581817130].[none:Origin:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;HPN&quot;</bucket>
              <bucket>&quot;BOS&quot;</bucket>
              <bucket>&quot;DAL&quot;</bucket>
              <bucket>&quot;DCA&quot;</bucket>
              <bucket>&quot;ORD&quot;</bucket>
              <bucket>&quot;LGA&quot;</bucket>
              <bucket>&quot;EWR&quot;</bucket>
              <bucket>&quot;PHL&quot;</bucket>
              <bucket>&quot;DUT&quot;</bucket>
              <bucket>&quot;ASE&quot;</bucket>
              <bucket>&quot;SUN&quot;</bucket>
              <bucket>&quot;HOU&quot;</bucket>
              <bucket>&quot;JFK&quot;</bucket>
              <bucket>&quot;AZO&quot;</bucket>
              <bucket>&quot;CID&quot;</bucket>
              <bucket>&quot;DTW&quot;</bucket>
              <bucket>&quot;SFO&quot;</bucket>
              <bucket>&quot;MDW&quot;</bucket>
              <bucket>&quot;ANC&quot;</bucket>
              <bucket>&quot;PWM&quot;</bucket>
              <bucket>&quot;ISP&quot;</bucket>
              <bucket>&quot;RST&quot;</bucket>
              <bucket>&quot;MSP&quot;</bucket>
              <bucket>&quot;IAD&quot;</bucket>
              <bucket>&quot;STL&quot;</bucket>
              <bucket>&quot;ROC&quot;</bucket>
              <bucket>&quot;MKE&quot;</bucket>
              <bucket>&quot;LAN&quot;</bucket>
              <bucket>&quot;DFW&quot;</bucket>
              <bucket>&quot;COS&quot;</bucket>
              <bucket>&quot;ORH&quot;</bucket>
              <bucket>&quot;GSO&quot;</bucket>
              <bucket>&quot;GSP&quot;</bucket>
              <bucket>&quot;ICT&quot;</bucket>
              <bucket>&quot;ROA&quot;</bucket>
              <bucket>&quot;RIC&quot;</bucket>
              <bucket>&quot;LAX&quot;</bucket>
              <bucket>&quot;PNS&quot;</bucket>
              <bucket>&quot;SBN&quot;</bucket>
              <bucket>&quot;TYS&quot;</bucket>
              <bucket>&quot;OAK&quot;</bucket>
              <bucket>&quot;ORF&quot;</bucket>
              <bucket>&quot;MAF&quot;</bucket>
              <bucket>&quot;CVG&quot;</bucket>
              <bucket>&quot;ONT&quot;</bucket>
              <bucket>&quot;LBB&quot;</bucket>
              <bucket>&quot;MEM&quot;</bucket>
              <bucket>&quot;CLE&quot;</bucket>
              <bucket>&quot;LIT&quot;</bucket>
              <bucket>&quot;BHM&quot;</bucket>
              <bucket>&quot;SDF&quot;</bucket>
              <bucket>&quot;SJC&quot;</bucket>
              <bucket>&quot;TUL&quot;</bucket>
              <bucket>&quot;DEN&quot;</bucket>
              <bucket>&quot;RDU&quot;</bucket>
              <bucket>&quot;CLT&quot;</bucket>
              <bucket>&quot;MSY&quot;</bucket>
              <bucket>&quot;FAT&quot;</bucket>
              <bucket>&quot;SRQ&quot;</bucket>
              <bucket>&quot;PSP&quot;</bucket>
              <bucket>&quot;MCI&quot;</bucket>
              <bucket>&quot;OKC&quot;</bucket>
              <bucket>&quot;SAN&quot;</bucket>
              <bucket>&quot;IAH&quot;</bucket>
              <bucket>&quot;RNO&quot;</bucket>
              <bucket>&quot;AUS&quot;</bucket>
              <bucket>&quot;IND&quot;</bucket>
              <bucket>&quot;SAT&quot;</bucket>
              <bucket>&quot;SJU&quot;</bucket>
              <bucket>&quot;LGB&quot;</bucket>
              <bucket>&quot;SMF&quot;</bucket>
              <bucket>&quot;MIA&quot;</bucket>
              <bucket>&quot;JAX&quot;</bucket>
              <bucket>&quot;ELP&quot;</bucket>
              <bucket>&quot;PDX&quot;</bucket>
              <bucket>&quot;OMA&quot;</bucket>
              <bucket>&quot;TUS&quot;</bucket>
              <bucket>&quot;PHX&quot;</bucket>
              <bucket>&quot;SEA&quot;</bucket>
              <bucket>&quot;BOI&quot;</bucket>
              <bucket>&quot;SLC&quot;</bucket>
              <bucket>&quot;BNA&quot;</bucket>
              <bucket>&quot;FLL&quot;</bucket>
              <bucket>&quot;RSW&quot;</bucket>
              <bucket>&quot;TPA&quot;</bucket>
              <bucket>&quot;ABQ&quot;</bucket>
              <bucket>&quot;MCO&quot;</bucket>
              <bucket>&quot;PBI&quot;</bucket>
              <bucket>&quot;LAS&quot;</bucket>
              <bucket>&quot;HNL&quot;</bucket>
              <bucket>%all%</bucket>
              <bucket>%null%</bucket>
              <bucket>&quot;ABE&quot;</bucket>
              <bucket>&quot;CYS&quot;</bucket>
              <bucket>&quot;FMN&quot;</bucket>
              <bucket>&quot;ABI&quot;</bucket>
              <bucket>&quot;ABY&quot;</bucket>
              <bucket>&quot;ACK&quot;</bucket>
              <bucket>&quot;ACT&quot;</bucket>
              <bucket>&quot;ACV&quot;</bucket>
              <bucket>&quot;ACY&quot;</bucket>
              <bucket>&quot;ADK&quot;</bucket>
              <bucket>&quot;ADQ&quot;</bucket>
              <bucket>&quot;AEX&quot;</bucket>
              <bucket>&quot;AGS&quot;</bucket>
              <bucket>&quot;AKN&quot;</bucket>
              <bucket>&quot;ALB&quot;</bucket>
              <bucket>&quot;ALO&quot;</bucket>
              <bucket>&quot;AMA&quot;</bucket>
              <bucket>&quot;ANI&quot;</bucket>
              <bucket>&quot;APF&quot;</bucket>
              <bucket>&quot;ATL&quot;</bucket>
              <bucket>&quot;ATW&quot;</bucket>
              <bucket>&quot;AVL&quot;</bucket>
              <bucket>&quot;AVP&quot;</bucket>
              <bucket>&quot;BDL&quot;</bucket>
              <bucket>&quot;BET&quot;</bucket>
              <bucket>&quot;BFF&quot;</bucket>
              <bucket>&quot;BFI&quot;</bucket>
              <bucket>&quot;BFL&quot;</bucket>
              <bucket>&quot;BGM&quot;</bucket>
              <bucket>&quot;BGR&quot;</bucket>
              <bucket>&quot;BIL&quot;</bucket>
              <bucket>&quot;BIS&quot;</bucket>
              <bucket>&quot;BJI&quot;</bucket>
              <bucket>&quot;BLI&quot;</bucket>
              <bucket>&quot;BMI&quot;</bucket>
              <bucket>&quot;BPT&quot;</bucket>
              <bucket>&quot;BQK&quot;</bucket>
              <bucket>&quot;BQN&quot;</bucket>
              <bucket>&quot;BRO&quot;</bucket>
              <bucket>&quot;BRW&quot;</bucket>
              <bucket>&quot;BTM&quot;</bucket>
              <bucket>&quot;BTR&quot;</bucket>
              <bucket>&quot;BTV&quot;</bucket>
              <bucket>&quot;BUF&quot;</bucket>
              <bucket>&quot;BUR&quot;</bucket>
              <bucket>&quot;BWI&quot;</bucket>
              <bucket>&quot;BZN&quot;</bucket>
              <bucket>&quot;CAE&quot;</bucket>
              <bucket>&quot;CAK&quot;</bucket>
              <bucket>&quot;CCR&quot;</bucket>
              <bucket>&quot;CDC&quot;</bucket>
              <bucket>&quot;CDV&quot;</bucket>
              <bucket>&quot;CEC&quot;</bucket>
              <bucket>&quot;CHA&quot;</bucket>
              <bucket>&quot;CHO&quot;</bucket>
              <bucket>&quot;CHS&quot;</bucket>
              <bucket>&quot;CIC&quot;</bucket>
              <bucket>&quot;CKB&quot;</bucket>
              <bucket>&quot;CLD&quot;</bucket>
              <bucket>&quot;CLL&quot;</bucket>
              <bucket>&quot;CMH&quot;</bucket>
              <bucket>&quot;CMI&quot;</bucket>
              <bucket>&quot;CMX&quot;</bucket>
              <bucket>&quot;COD&quot;</bucket>
              <bucket>&quot;CPR&quot;</bucket>
              <bucket>&quot;CRP&quot;</bucket>
              <bucket>&quot;CRW&quot;</bucket>
              <bucket>&quot;CSG&quot;</bucket>
              <bucket>&quot;CWA&quot;</bucket>
              <bucket>&quot;DAB&quot;</bucket>
              <bucket>&quot;DAY&quot;</bucket>
              <bucket>&quot;DBQ&quot;</bucket>
              <bucket>&quot;DET&quot;</bucket>
              <bucket>&quot;DHN&quot;</bucket>
              <bucket>&quot;DLG&quot;</bucket>
              <bucket>&quot;DLH&quot;</bucket>
              <bucket>&quot;DRO&quot;</bucket>
              <bucket>&quot;DSM&quot;</bucket>
              <bucket>&quot;EAU&quot;</bucket>
              <bucket>&quot;EFD&quot;</bucket>
              <bucket>&quot;EGE&quot;</bucket>
              <bucket>&quot;EKO&quot;</bucket>
              <bucket>&quot;ELM&quot;</bucket>
              <bucket>&quot;ERI&quot;</bucket>
              <bucket>&quot;EUG&quot;</bucket>
              <bucket>&quot;EVV&quot;</bucket>
              <bucket>&quot;EWN&quot;</bucket>
              <bucket>&quot;EYW&quot;</bucket>
              <bucket>&quot;FAI&quot;</bucket>
              <bucket>&quot;FAR&quot;</bucket>
              <bucket>&quot;FAY&quot;</bucket>
              <bucket>&quot;FCA&quot;</bucket>
              <bucket>&quot;FLG&quot;</bucket>
              <bucket>&quot;FLO&quot;</bucket>
              <bucket>&quot;FNT&quot;</bucket>
              <bucket>&quot;FSD&quot;</bucket>
              <bucket>&quot;FSM&quot;</bucket>
              <bucket>&quot;FWA&quot;</bucket>
              <bucket>&quot;GCC&quot;</bucket>
              <bucket>&quot;GCN&quot;</bucket>
              <bucket>&quot;GEG&quot;</bucket>
              <bucket>&quot;GFK&quot;</bucket>
              <bucket>&quot;GGG&quot;</bucket>
              <bucket>&quot;GJT&quot;</bucket>
              <bucket>&quot;GLH&quot;</bucket>
              <bucket>&quot;MKC&quot;</bucket>
              <bucket>&quot;PIR&quot;</bucket>
              <bucket>&quot;KSM&quot;</bucket>
              <bucket>&quot;KTN&quot;</bucket>
              <bucket>&quot;LAW&quot;</bucket>
              <bucket>&quot;LCH&quot;</bucket>
              <bucket>&quot;LEX&quot;</bucket>
              <bucket>&quot;LFT&quot;</bucket>
              <bucket>&quot;LIH&quot;</bucket>
              <bucket>&quot;LMT&quot;</bucket>
              <bucket>&quot;LNK&quot;</bucket>
              <bucket>&quot;LNY&quot;</bucket>
              <bucket>&quot;LRD&quot;</bucket>
              <bucket>&quot;LSE&quot;</bucket>
              <bucket>&quot;LWB&quot;</bucket>
              <bucket>&quot;LWS&quot;</bucket>
              <bucket>&quot;LYH&quot;</bucket>
              <bucket>&quot;MAZ&quot;</bucket>
              <bucket>&quot;MBS&quot;</bucket>
              <bucket>&quot;MCN&quot;</bucket>
              <bucket>&quot;MDT&quot;</bucket>
              <bucket>&quot;MEI&quot;</bucket>
              <bucket>&quot;MFE&quot;</bucket>
              <bucket>&quot;MFR&quot;</bucket>
              <bucket>&quot;MGM&quot;</bucket>
              <bucket>&quot;MHT&quot;</bucket>
              <bucket>&quot;MIB&quot;</bucket>
              <bucket>&quot;MKG&quot;</bucket>
              <bucket>&quot;MKK&quot;</bucket>
              <bucket>&quot;MLB&quot;</bucket>
              <bucket>&quot;MLI&quot;</bucket>
              <bucket>&quot;MLU&quot;</bucket>
              <bucket>&quot;MOB&quot;</bucket>
              <bucket>&quot;MOD&quot;</bucket>
              <bucket>&quot;MOT&quot;</bucket>
              <bucket>&quot;MQT&quot;</bucket>
              <bucket>&quot;MRY&quot;</bucket>
              <bucket>&quot;MSN&quot;</bucket>
              <bucket>&quot;MSO&quot;</bucket>
              <bucket>&quot;MTH&quot;</bucket>
              <bucket>&quot;MTJ&quot;</bucket>
              <bucket>&quot;MYR&quot;</bucket>
              <bucket>&quot;OAJ&quot;</bucket>
              <bucket>&quot;OGD&quot;</bucket>
              <bucket>&quot;GNV&quot;</bucket>
              <bucket>&quot;GPT&quot;</bucket>
              <bucket>&quot;GRB&quot;</bucket>
              <bucket>&quot;GRK&quot;</bucket>
              <bucket>&quot;GRR&quot;</bucket>
              <bucket>&quot;GST&quot;</bucket>
              <bucket>&quot;GTF&quot;</bucket>
              <bucket>&quot;GTR&quot;</bucket>
              <bucket>&quot;GUC&quot;</bucket>
              <bucket>&quot;GUM&quot;</bucket>
              <bucket>&quot;HDN&quot;</bucket>
              <bucket>&quot;HHH&quot;</bucket>
              <bucket>&quot;HKY&quot;</bucket>
              <bucket>&quot;HLN&quot;</bucket>
              <bucket>&quot;HRL&quot;</bucket>
              <bucket>&quot;HSV&quot;</bucket>
              <bucket>&quot;HTS&quot;</bucket>
              <bucket>&quot;HVN&quot;</bucket>
              <bucket>&quot;IDA&quot;</bucket>
              <bucket>&quot;ILE&quot;</bucket>
              <bucket>&quot;ILG&quot;</bucket>
              <bucket>&quot;ILM&quot;</bucket>
              <bucket>&quot;INL&quot;</bucket>
              <bucket>&quot;IPL&quot;</bucket>
              <bucket>&quot;ISO&quot;</bucket>
              <bucket>&quot;ITH&quot;</bucket>
              <bucket>&quot;ITO&quot;</bucket>
              <bucket>&quot;IYK&quot;</bucket>
              <bucket>&quot;JAC&quot;</bucket>
              <bucket>&quot;JAN&quot;</bucket>
              <bucket>&quot;JNU&quot;</bucket>
              <bucket>&quot;KOA&quot;</bucket>
              <bucket>&quot;OGG&quot;</bucket>
              <bucket>&quot;OME&quot;</bucket>
              <bucket>&quot;OTH&quot;</bucket>
              <bucket>&quot;OTZ&quot;</bucket>
              <bucket>&quot;OXR&quot;</bucket>
              <bucket>&quot;PFN&quot;</bucket>
              <bucket>&quot;PHF&quot;</bucket>
              <bucket>&quot;PIA&quot;</bucket>
              <bucket>&quot;PIE&quot;</bucket>
              <bucket>&quot;PIH&quot;</bucket>
              <bucket>&quot;PIT&quot;</bucket>
              <bucket>&quot;PLN&quot;</bucket>
              <bucket>&quot;PMD&quot;</bucket>
              <bucket>&quot;PSC&quot;</bucket>
              <bucket>&quot;PSE&quot;</bucket>
              <bucket>&quot;PSG&quot;</bucket>
              <bucket>&quot;PUB&quot;</bucket>
              <bucket>&quot;PVD&quot;</bucket>
              <bucket>&quot;PVU&quot;</bucket>
              <bucket>&quot;RAP&quot;</bucket>
              <bucket>&quot;RDD&quot;</bucket>
              <bucket>&quot;RDM&quot;</bucket>
              <bucket>&quot;RDR&quot;</bucket>
              <bucket>&quot;RFD&quot;</bucket>
              <bucket>&quot;RHI&quot;</bucket>
              <bucket>&quot;RKS&quot;</bucket>
              <bucket>&quot;ROP&quot;</bucket>
              <bucket>&quot;ROR&quot;</bucket>
              <bucket>&quot;ROW&quot;</bucket>
              <bucket>&quot;SAV&quot;</bucket>
              <bucket>&quot;SBA&quot;</bucket>
              <bucket>&quot;SBP&quot;</bucket>
              <bucket>&quot;SCC&quot;</bucket>
              <bucket>&quot;SCE&quot;</bucket>
              <bucket>&quot;SCK&quot;</bucket>
              <bucket>&quot;SGF&quot;</bucket>
              <bucket>&quot;SGU&quot;</bucket>
              <bucket>&quot;SHV&quot;</bucket>
              <bucket>&quot;SIT&quot;</bucket>
              <bucket>&quot;SJT&quot;</bucket>
              <bucket>&quot;SLE&quot;</bucket>
              <bucket>&quot;SMX&quot;</bucket>
              <bucket>&quot;SNA&quot;</bucket>
              <bucket>&quot;SOP&quot;</bucket>
              <bucket>&quot;SPI&quot;</bucket>
              <bucket>&quot;SPN&quot;</bucket>
              <bucket>&quot;SPS&quot;</bucket>
              <bucket>&quot;STT&quot;</bucket>
              <bucket>&quot;STX&quot;</bucket>
              <bucket>&quot;SUX&quot;</bucket>
              <bucket>&quot;SWF&quot;</bucket>
              <bucket>&quot;SYR&quot;</bucket>
              <bucket>&quot;TEX&quot;</bucket>
              <bucket>&quot;TLH&quot;</bucket>
              <bucket>&quot;TOL&quot;</bucket>
              <bucket>&quot;TRI&quot;</bucket>
              <bucket>&quot;TTN&quot;</bucket>
              <bucket>&quot;TUP&quot;</bucket>
              <bucket>&quot;TVC&quot;</bucket>
              <bucket>&quot;TVL&quot;</bucket>
              <bucket>&quot;TWF&quot;</bucket>
              <bucket>&quot;TXK&quot;</bucket>
              <bucket>&quot;TYR&quot;</bucket>
              <bucket>&quot;UCA&quot;</bucket>
              <bucket>&quot;VCT&quot;</bucket>
              <bucket>&quot;VIS&quot;</bucket>
              <bucket>&quot;VLD&quot;</bucket>
              <bucket>&quot;VPS&quot;</bucket>
              <bucket>&quot;WRG&quot;</bucket>
              <bucket>&quot;WYS&quot;</bucket>
              <bucket>&quot;XNA&quot;</bucket>
              <bucket>&quot;YAK&quot;</bucket>
              <bucket>&quot;YAP&quot;</bucket>
              <bucket>&quot;YKM&quot;</bucket>
              <bucket>&quot;YUM&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[usr:03 Grab Coefficient Variables (copy):ok]' member='-1' />
              <groupfilter function='member' level='[usr:03 Grab Coefficient Variables (copy):ok]' member='1' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' included-values='in-range'>
            <min>1</min>
            <max>10</max>
          </filter>
          <filter class='quantitative' column='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' included-values='non-null'>
          </filter>
          <slices>
            <column>[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]</column>
            <column>[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]</column>
            <column>[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]</column>
            <column>[csv.41677.501581817130].[none:OCity:nk]</column>
            <column>[csv.41677.501581817130].[Action (OCity,OLat,OLong,Origin)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='display' field='[csv.41677.501581817130].[none:OCity:nk]' value='false' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' value='false' />
            <format attr='break-on-special' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' value='false' />
            <format attr='show-null-value-warning' field='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' value='Index of Top 10 or Bottom 10 Airports'>
              <formatted-text>
                <run>Index of Top 10 or Bottom 10 Airports</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]</rows>
        <cols>([csv.41677.501581817130].[none:Origin:nk] / [csv.41677.501581817130].[none:OCity:nk])</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Flight Cancellation Dashboard'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Flight Cancellation Based on Departure Point</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
        <style-rule element='table'>
          <format attr='background-color' value='#ffffff' />
        </style-rule>
      </style>
      <size maxheight='900' maxwidth='1700' minheight='900' minwidth='1700' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='27' param='vert' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='4443' id='26' name='' type='title' w='100000' x='0' y='0'>
            </zone>
            <zone h='95557' id='22' param='horz' type='layout-flow' w='100000' x='0' y='4443'>
              <zone h='95557' id='20' param='horz' type='layout-flow' w='90588' x='0' y='4443'>
                <zone h='95557' id='18' type='layout-basic' w='90588' x='0' y='4443'>
                  <zone h='47780' id='13' param='horz' type='layout-flow' w='90588' x='0' y='4443'>
                    <zone h='47780' id='11' param='horz' type='layout-flow' w='90588' x='0' y='4443'>
                      <zone h='47780' id='9' type='layout-basic' w='90588' x='0' y='4443'>
                        <zone h='47780' id='5' param='horz' type='layout-flow' w='90588' x='0' y='4443'>
                          <zone fixed-size='561' h='47780' id='3' is-fixed='true' type='layout-basic' w='90588' x='0' y='4443'>
                            <zone h='47780' id='1' name='Geo Map  w.o. Null' show-title='true' w='45632' x='0' y='4443'>
                            </zone>
                            <zone h='47780' id='35' name='Heat Map' show-title='true' w='44956' x='45632' y='4443'>
                            </zone>
                          </zone>
                        </zone>
                      </zone>
                    </zone>
                  </zone>
                  <zone h='47777' id='37' name='Regional Distribution' show-title='true' w='28647' x='0' y='52223'>
                  </zone>
                  <zone h='47777' id='34' name='Flights By Airport' show-title='true' w='26176' x='64412' y='52223'>
                  </zone>
                  <zone h='47777' id='39' name='Variable Importance' show-title='true' w='35765' x='28647' y='52223'>
                  </zone>
                </zone>
              </zone>
              <zone fixed-size='160' h='95557' id='21' is-fixed='true' param='vert' type='layout-flow' w='9412' x='90588' y='4443'>
                <zone h='888' id='23' name='Geo Map  w.o. Null' param='[csv.41677.501581817130].[none:City:nk]' type='filter' w='9412' x='90588' y='4443'>
                </zone>
                <zone fixed-size='113' h='13444' id='31' is-fixed='true' name='AUC' show-title='true' w='9412' x='90588' y='5331'>
                  <layout-cache fixed-size-w='114' type-h='fixed' type-w='fixed' />
                </zone>
                <zone h='7332' id='28' name='Geo Map  w.o. Null' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:2]' type='filter' w='9412' x='90588' y='18775'>
                </zone>
                <zone h='6444' id='36' name='Heat Map' pane-specification-id='0' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' type='color' w='9412' x='90588' y='26107'>
                </zone>
                <zone h='7332' id='40' name='Variable Importance' param='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' type='filter' w='9412' x='90588' y='32551'>
                </zone>
                <zone h='60117' id='41' name='Geo Map  w.o. Null' param='[csv.41677.501581817130].[none:OCity:nk]' type='filter' w='9412' x='90588' y='39883'>
                </zone>
              </zone>
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='1' name='Parameters Control'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 10]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 11]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 14]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 13]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 12]' type='parameter' />
          </strip>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 6]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 1]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 5]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 15]' type='parameter' />
            <card mode='type_in' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <floating-toolbar-visibility value='1' />
      </viewpoint>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[:Measure Names]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_0090526172605051:nk:2]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_0090526172605051:nk]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_0500424135127287:nk]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_0520904112538377:nk:1]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_0520904112538377:nk]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_2960206151848632:nk]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_5340526195241971:nk]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_8510424132229395:nk]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_8800501133749493:nk:1]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_8800501133749493:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Flights By Month'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[csv.41677.501581817130].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[:Measure Names]</field>
          <field>[csv.41677.501581817130].[none:Month:qk]</field>
          <field>[csv.41677.501581817130].[usr:02 Flight Count By Months (copy):qk:1]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_1340527151300682:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Flights By Airport'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[:Measure Names]</field>
          <field>[csv.41677.501581817130].[none:OCity:nk]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Variable Importance'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[none:OCity:nk]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Table Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[csv.41677.501581817130].[usr:Calculation_0840422201739178:ok]' show-domain='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[Parameters].[Parameter 1]</field>
          <field>[csv.41677.501581817130].[:Measure Names]</field>
          <field>[csv.41677.501581817130].[max:Origin:nk]</field>
          <field>[csv.41677.501581817130].[none:City:nk]</field>
          <field>[csv.41677.501581817130].[none:FlightNum:ok]</field>
          <field>[csv.41677.501581817130].[none:IsDepDelayed:nk]</field>
          <field>[csv.41677.501581817130].[none:Month:qk]</field>
          <field>[csv.41677.501581817130].[none:OCity:nk]</field>
          <field>[csv.41677.501581817130].[none:Origin (copy 2):nk]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Heat Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[none:OCity:nk]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Geo Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Geo Map  w.o. Null'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]' type='color' />
            <card pane-specification-id='2' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk]' type='size' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[none:City:nk]</field>
          <field>[csv.41677.501581817130].[none:OLat:qk]</field>
          <field>[csv.41677.501581817130].[none:OLong:qk]</field>
          <field>[csv.41677.501581817130].[none:Origin:nk]</field>
          <field>[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):ok]</field>
          <field>[csv.41677.501581817130].[usr:03 Grab Coefficient Variables (copy):qk:1]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_0840422201739178:qk:2]</field>
          <field>[csv.41677.501581817130].[usr:Calculation_7320206215923342:nk:2]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Regional Distribution'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41677.501581817130].[Regional Groups]</field>
          <field>[csv.41677.501581817130].[none:OCity:nk]</field>
        </color-one-way>
      </highlight>
      <viewpoint>
      </viewpoint>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Flight Cancellation Dashboard'>
      <active id='1' />
      <zones>
        <zone h='4443' id='26' name='' type='title' w='100000' x='0' y='0' />
        <zone name='Regional Distribution'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone name='Variable Importance'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone h='888' id='23' name='Geo Map  w.o. Null' param='[csv.41677.501581817130].[none:City:nk]' type='filter' w='9412' x='90588' y='4443' />
        <zone name='Geo Map  w.o. Null' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:2]' show-null-ctrls='true' type='filter' />
        <zone name='Heat Map' pane-specification-id='0' param='[csv.41677.501581817130].[usr:Calculation_7320206215923342:qk:1]' type='color' />
        <zone name='Variable Importance' param='[csv.41677.501581817130].[usr:Calculation_0230903195627598:qk:2]' show-null-ctrls='false' type='filter' />
      </zones>
    </window>
    <window class='hidden-worksheet' name='AUC'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='64' name='Parameters Control' width='114'>
      iVBORw0KGgoAAAANSUhEUgAAAHIAAABACAYAAADGbyPbAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAACU0lEQVR4nO3dMWgTUQDG8a+eOMSpYKnt5JAhFOkRBEFIbNEOgrMHgZZIUJQshVCU4OAo
      OCgVDA4xIFECySZ0ECIm5EqkIEdE5ZQUCpFKObBoMUPhiEMzxE3EevXL94Mb7t3xePDnjuMt
      N9Lr9XqQ/96hoBcgf4dCklBIEgpJQiFJKCQJhSShkCQUkoRCklBIEgpJQiFJKCQJhSShkCQU
      koRCklBIEgpJQiFJKCQJhSShkCQUkoRCklBIEgpJQiFJKCQJhSShkCQUkoRCklBIEgpJQiFJ
      KCQJhSShkCQUkoRCklBIEgpJQiFJKCQJhSRxOOgF/Cuu6wa9hH01NCEBIBKJBL2EfaNXKwmF
      JKGQJBSShEIGzoeTuwwrU0FnYLRTycC63/ztWRQyaP4aam9MxMZs1Nf/fBqFDFi3UcO70+dw
      5cxxvKq2fr34/TUeXEvASiSxlHewAwDYgZNfQjJhwZpP497LLfhQyIB1sdb8jLOzJkLxCzj1
      dhWOP3D5fRtHF5+glEth3F5G0fHhO0Us2+NI5Up4ejOKT/kCGt0h2xA4aL6u3EHO8QDHwkp/
      rHF3Co+zs3snE3HMTR2BgRnEzIeotDexiTa65iXMjBrA6FU8Ku3dqicyMB5su4Pzt8ool/tH
      KYv4xxeoev1bvjRQ/bALf7sOuxVCODyJyXAYoZaN+raP3fVnyFhZPPcUMjheE80NE9MnB8aM
      aUTNDdRq/e/XiRP4UUwhkS5gK7aIhagBI7qAG3PfUEgnMH97FceS13FxDBgZlp+cua6rvVY5
      +BSSxE+aXpYX21VVjgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Flights By Month' width='192'>
      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
      yG6iP7eaAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Flights By Airport' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Variable Importance' width='192'>
      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
      hNIkAEJp/wdFsI1n7rhAWwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Table Chart' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Heat Map' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Geo Map' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Geo Map  w.o. Null' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Regional Distribution' width='192'>
      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
      AfaxjxwIUfUiAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Flight Cancellation Dashboard' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
